{
  "hash": "b37ac5c24a617847f7ab2fbc83639f33",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ICE 2: \"\nauthor: \"William\"\ndate: \"August 26, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n\n# Load packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse,sf,ggstatsplot,tmap)\n```\n:::\n\n\n\n\n# Import data\n\n### [**Master Plan 2014 Subzone Boundary (Web)**](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_5cb80a95445f236737f6bc2bfe5f159d)\n\n##### **SHP**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_shp <- st_read(dsn = 'data/geospatial/', layer = 'MP14_SUBZONE_WEB_PL')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\n# layer means sf will search for the engine(?)\n# layer wont need extension because it knows to seek for a shapefile\n#'<-' or '=' works on windows+macOS\n```\n:::\n\n\n\n\n> Note: R is a OOP enabled language, sf being the object class\n\n**Examine the data**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(mpsz14_shp)\n```\n:::\n\n\n\n\n##### **KML**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_kml = st_read('data/geospatial/MasterPlan2014SubzoneBoundaryWebKML.kml')\n# supposed to trigger a error message saying its unsupported / corrupted\n```\n:::\n\n\n\n\n**`MasterPlan2014SubzoneBoundaryWebKML.kml` from data.gov.sg is apparently corrupted.**\n\n**This is a quick fix:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(mpsz14_shp, 'data/geospatial/MP14_SUBZONE_WEB_PL.kml', delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting source `data/geospatial/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/geospatial/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n```\n\n\n:::\n:::\n\n\n\n\n### **Master Plan 2019 Subzone Boundary (No sea)** \n\n##### **kml**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_kml = st_read('data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n\n##### **SHP** (from ice1 in elearn)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = 'data/MPSZ-2019/', layer = 'MPSZ-2019')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n\n##### **geojson**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_geojson <- st_read('data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaGEOJSON.geojson')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MasterPlan2019SubzoneBoundaryNoSeaGEOJSON' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n\n> Note: geojson format is very messy because the data is buried under html tags so lines of code is needed to extract; while in the kml / shp formats the data is readily accessible\n\n> Note: under 'geometry' if the values tend to be large, its because its in PCS (measure in meters)\n\n### Singapore Residents by Planning Area / Subzone, Age Group, Sex and Floor Area of Residence 2023\n\n> Note: use the .csv file\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 = read_csv('data/respopagesexfa2023.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n# Data Wrangling\n\n**Prepare a data frame using the population data**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 = popdata2023 %>% \n  group_by(PA,SZ,AG) %>% \n  summarise(POP=sum(Pop)) %>% \n  ungroup() %>% \n  pivot_wider(names_from = AG,values_from = POP)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n\n\n> pivot_wider() transposes the data table structure for easier function application\n\n**Examine the data structure**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [332 × 21] (S3: tbl_df/tbl/data.frame)\n $ PA         : chr [1:332] \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ         : chr [1:332] \"Ang Mo Kio Town Centre\" \"Cheng San\" \"Chong Boon\" \"Kebun Bahru\" ...\n $ 0_to_4     : num [1:332] 160 860 680 600 190 730 190 530 0 150 ...\n $ 10_to_14   : num [1:332] 300 1000 890 870 390 720 360 830 0 210 ...\n $ 15_to_19   : num [1:332] 310 1080 1020 970 430 730 450 860 0 240 ...\n $ 20_to_24   : num [1:332] 280 1210 1220 1050 480 850 520 830 0 250 ...\n $ 25_to_29   : num [1:332] 290 1570 1470 1250 510 1050 590 1110 0 320 ...\n $ 30_to_34   : num [1:332] 330 1950 1740 1470 400 1310 540 1400 0 260 ...\n $ 35_to_39   : num [1:332] 320 1860 1640 1390 320 1060 380 1200 0 240 ...\n $ 40_to_44   : num [1:332] 400 2100 1690 1580 380 1110 400 1490 0 300 ...\n $ 45_to_49   : num [1:332] 440 1910 1790 1640 480 1180 520 1530 0 300 ...\n $ 50_to_54   : num [1:332] 420 2070 1780 1680 550 1230 600 1400 0 340 ...\n $ 55_to_59   : num [1:332] 340 2050 1980 1720 540 1310 600 1410 0 300 ...\n $ 5_to_9     : num [1:332] 260 970 790 810 350 730 300 690 0 210 ...\n $ 60_to_64   : num [1:332] 300 2070 2080 1710 520 1410 660 1570 0 310 ...\n $ 65_to_69   : num [1:332] 270 2080 2070 1680 420 1270 630 1530 0 310 ...\n $ 70_to_74   : num [1:332] 280 1980 1900 1570 370 1150 440 1480 0 230 ...\n $ 75_to_79   : num [1:332] 160 1210 1410 1120 280 790 280 1050 0 150 ...\n $ 80_to_84   : num [1:332] 120 760 990 710 190 580 220 750 0 90 ...\n $ 85_to_89   : num [1:332] 50 360 450 360 120 310 150 400 0 50 ...\n $ 90_and_Over: num [1:332] 30 200 250 210 90 180 80 210 0 30 ...\n```\n\n\n:::\n:::\n\n\n\n\n> Note: age ranges are not in sequential order\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n\n\n:::\n:::\n\n\n\n\n> Note: index starts from 1\n\n**Fix the data table (override the previous)**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 = popdata2023 %>% \n  # CALCULATING AGE GROUP TOTALS\n  mutate(`YOUNG`=rowSums(.[3:6])+rowSums(.[14])) %>%                # CREATES new col 'YOUNG'\n  mutate(`ECONOMY ACTIVE`=rowSums(.[7:13])+rowSums(.[15])) %>%   # CREATES new col `ECONOMY ACTIVE`\n  mutate(`AGED`=rowSums(.[16:21])) %>%                              # CREATES new col `AGED`\n  mutate(`TOTAL`=rowSums(.[3:21])) %>%                              # CREATES new col `TOTAL`\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%   # CREATES new col `DEPENDENCY` to calculate dependency ratio\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`) # determines column order and contents in OUTPUT DATASET\n```\n:::\n\n\n\n\n**Because R is case sensitive, convert everything into the same upper/lowercase in all the datasets**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 = popdata2023 %>% \n  mutate_at(.vars = vars(PA,SZ),.funs = list(toupper))\n```\n:::\n\n\n\n\n**Combine**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 = left_join(popdata2023,mpsz19_shp, by = c('SZ'='SUBZONE_N'))\n```\n:::\n\n\n\n\n> Note: In the c() function, the column names' positions correspond to which data table is the left table\n\n# Transforming Coordinate System\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp = st_read(dsn = 'data/MPSZ-2019/', layer = 'MPSZ-2019') %>% # piping caches for next operation, saving memory\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read('data/PreSchoolsLocation.kml') %>% \n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n\n**Checking CRS**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz19_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
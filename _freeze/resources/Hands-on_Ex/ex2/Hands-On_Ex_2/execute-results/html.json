{
  "hash": "229faff7c6478569395b4d9f849f7c7e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 2: Thematic Mapping & Geovisualisation with R\"\nauthor: \"William\"\ndate: \"August 23, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n\n# Overview\n\n**Terms & Concepts**:\n\n-   **Geovisualisation**: The **over-arching concept** that involve any geographic data visualisation technique\n\n-   **Thematic** mapping: Use of map types/symbols to visualise variables that are **not naturally visible** in a geographical area\n\n-   **Choropleth** mapping: Type of thematic mapping to visualise variability across a region using **color**\n\nI will be using these R packages to build cartographic quality thematic maps:\n\n-   **tmap**\n\n-   **tidyverse p**\n\n    -   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,\n\n    -   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n\n    -   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n\n    -   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.\n\nLoad the packages into RStudio.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n\n\n# Import Data\n\n### Data\n\nThe following datasets will be used to create a choropleth map:\n\n-   [Master Plan 2014 Subzone](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9 \"ESRI shapefile\")[Boundary](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9)[(Web)](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9 \"ESRI shapefile\") : geospatial data consisting of the geographical boundary of SGP at the planning subzone level\n\n-   [Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data \"csv format; aspatial data fie\") : does not contain any coordinates values, but it’s PA and SZ fields can be used as UIDs to geocode to `MP14_SUBZONE_WEB_PL` shapefile\n\n### Import Geospatial Data using `st_read()` from `sf`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmspz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/Hands-on_Ex/ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmspz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\n\n\n> Note: It displays only the first 10 rows (or features) by default. This is a feature of the `sf` package to prevent overwhelming the console with too much information at once, especially when working with large datasets.\n\nAlternatively, use the one of the following code to explore the spatial data without being limited by the default limit\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(mspz) # opens a separate tab to view the data in RStudios\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mspz) # check structure\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nClasses 'sf' and 'data.frame':\t323 obs. of  16 variables:\n $ OBJECTID  : int  1 2 3 4 5 6 7 8 9 10 ...\n $ SUBZONE_NO: int  1 1 3 8 3 7 9 2 13 7 ...\n $ SUBZONE_N : chr  \"MARINA SOUTH\" \"PEARL'S HILL\" \"BOAT QUAY\" \"HENDERSON HILL\" ...\n $ SUBZONE_C : chr  \"MSSZ01\" \"OTSZ01\" \"SRSZ03\" \"BMSZ08\" ...\n $ CA_IND    : chr  \"Y\" \"Y\" \"Y\" \"N\" ...\n $ PLN_AREA_N: chr  \"MARINA SOUTH\" \"OUTRAM\" \"SINGAPORE RIVER\" \"BUKIT MERAH\" ...\n $ PLN_AREA_C: chr  \"MS\" \"OT\" \"SR\" \"BM\" ...\n $ REGION_N  : chr  \"CENTRAL REGION\" \"CENTRAL REGION\" \"CENTRAL REGION\" \"CENTRAL REGION\" ...\n $ REGION_C  : chr  \"CR\" \"CR\" \"CR\" \"CR\" ...\n $ INC_CRC   : chr  \"5ED7EB253F99252E\" \"8C7149B9EB32EEFC\" \"C35FEFF02B13E0E5\" \"3775D82C5DDBEFBD\" ...\n $ FMEL_UPD_D: Date, format: \"2014-12-05\" \"2014-12-05\" ...\n $ X_ADDR    : num  31596 28679 29655 26783 26202 ...\n $ Y_ADDR    : num  29220 29782 29975 29934 30006 ...\n $ SHAPE_Leng: num  5267 3506 1741 3314 2826 ...\n $ SHAPE_Area: num  1630379 559816 160807 595429 387429 ...\n $ geometry  :sfc_MULTIPOLYGON of length 323; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:157, 1:2] 31496 31981 32333 32362 32362 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:15] \"OBJECTID\" \"SUBZONE_NO\" \"SUBZONE_N\" \"SUBZONE_C\" ...\n```\n\n\n:::\n:::\n\n\n\n\n### Import Attribute Data using `read_csv()` from `readr` package\n\nImport `respopagsex2011to2020.csv` file into RStudio and save the file into an R dataframe called `popdata`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesexfa2011to2020.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 738492 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nview(popdata)\n```\n:::\n\n\n\n\n### Data Preparation\n\nPrepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n\n-   AGED: age group 65 and above,\n\n-   TOTAL: all age group, and\n\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n##### Data Wrangling\n\n> [Data wrangling](https://online.hbs.edu/blog/post/data-wrangling) is the process of transforming and structuring data from one raw form into a desired format with the intent of improving data quality and making it more consumable and useful for analytics or machine learning.\n\nData wrangling & transformation functions used:\n\n-   `pivot_wider()` of **tidyr** package, and\n\n-   `mutate()`, `filter()`, `group_by()` and `select()` of **dplyr** package\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  # group_by -> summarise -> ungroup\n  filter(Time==2020) %>%   # keeps rows where the 'Time' col is 2020\n  group_by(PA,SZ,AG) %>%   # needed for summarise() to work\n  summarise(POP=sum(Pop)) %>% # summarises GROUPED DATA by summing 'Pop' value in each (PA,SZ,AG) group & stores in new col 'POP'\n  ungroup() %>%                   # removes grouping structure, allows us to perform further operations on the data\n  pivot_wider(names_from = AG,values_from =POP)  # reshapes data to WIDE format\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n\n\nVisualise `popdata2020` dataset before calculating age group totals.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(popdata2020)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>% \n  # CALCULATING AGE GROUP TOTALS\n  mutate(`YOUNG`=rowSums(.[3:6])+rowSums(.[14])) %>%                # CREATES new col 'YOUNG'\n  mutate(`ECONOMY ACTIVE`=rowSums(.[7:13])+rowSums(.[15])) %>%   # CREATES new col `ECONOMY ACTIVE`\n  mutate(`AGED`=rowSums(.[16:21])) %>%                              # CREATES new col `AGED`\n  mutate(`TOTAL`=rowSums(.[3:21])) %>%                              # CREATES new col `TOTAL`\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%   # CREATES new col `DEPENDENCY` to calculate dependency ratio\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`) # determines column order and contents in OUTPUT DATASET\n```\n:::\n\n\n\n\n##### Join attribute and geospatial data\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>% \n  mutate_at(.vars = vars(PA,SZ),.funs = list(toupper)) %>% \n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\n\n\nNext, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mspz,popdata2020,by = c('SUBZONE_N'='SZ')) # c() is a generic func which combines its args\n```\n:::\n\n\n\n\n> Note that the format of the **left** data table (`mpsz` simple feature dataframe) is preserved in the output, because of `left_join`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020,'data/rds/mpszpop2020.rds')\n```\n:::\n\n\n\n\n# Choropleth Mapping Geospatial Data Using `tmap` \n\n### Using `qtm()` \n\nPlot a cartographic standard choropleth map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\") # produce a static map; for interactive mode, “view” option should be used.\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\") # map the attribute (i.e. DEPENDENCY)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n### Using `tmap` elements\n\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of `qtm()` is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, `tmap`’s drawing elements should be used.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill('DEPENDENCY', \n          style = 'quantile', \n          palette = 'Blues',\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',\n            main.title.position = 'center',\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type='8star', size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits('Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS', position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n##### Plotting the base map\n\n`tm_shape()` followed by one or more layer elements such as `tm_fill()` and `tm_polygons()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n```\n:::\n\n\n\n\n##### Plotting a choropleth map using `tm_polygons()`\n\nAssign the target variable such as Dependency to `tm_polygons()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# The default interval binning used to draw the choropleth map is called “pretty”.\n# The default colour scheme used is YlOrRd of ColorBrewer.\n# By default, Missing value will be shaded in grey.\n```\n:::\n\n\n\n\n##### Plotting a choropleth map using `tm_fill()` and `tm_border()` \n\n`tm_fill()` shades the polygons by using the default colour scheme and `tm_borders()` adds the borders of the shapefile onto the choropleth map\n\nWithout borders,\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\nWith borders,\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = .1,  alpha = 1) # adds the boundary of the planning subzones\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# The alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\n# Arguments for tm_borders():\n\n# col = border colour,\n# lwd = border line width. The default is 1, and\n# lty = border line type. The default is “solid”.\n```\n:::\n\n\n\n\n### Data classification methods of `tmap`\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\n**`tmap`** provides a total ten data classification methods, namely:\n\n~(click\\ to\\ jump\\ to\\ corresponding\\ section)~\n\n-   *fixed*,\n\n-   [*sd*],\n\n-   [*equal*],\n\n-   [pretty (default],\n\n-   [*quantile*],\n\n-   [*kmeans*],\n\n-   [*hclust*],\n\n-   [*bclust*],\n\n-   [bclust], and\n\n-   [*jenks*].\n\nTo define a data classification method, the `style` argument of `tm_fill()` or `tm_polygons()` will be used.\n\n#### Plotting choropleth maps with built-in classification methods (n=5 and n=20)\n\n##### quantile\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,                 # 5 classes\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n##### equal\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n> Notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n##### sd\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n##### pretty (default)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n##### kmeans\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n##### hclust\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\n##### bclust\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n```\n\n\n:::\n:::\n\n\n\n\n##### fisher\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\n##### jenks\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Plotting choropleth map with custom break\n\nFor all the built-in styles, the category breaks are computed internally. To override these defaults, set the breakpoints using the `breaks` argument in `tm_fill()`. In **`tmap`** the breaks include a minimum and maximum. Hence to have n categories, n+1 elements must be specified in the `breaks` option in ascending order.\n\nCompute and display the descriptive statistics of **DEPENDENCY** field\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6540  0.7063  0.7712  0.7657 19.0000      92 \n```\n\n\n:::\n:::\n\n\n\n\n-   With reference to the results above, set break point at 0.60, 0.70, 0.80, and 0.90.\n\n-   Include a minimum and maximum at 0 and 1.00.\n\n-   Hence `c(0, 0.60, 0.70, 0.80, 0.90, 1.00)`\n\nPlot the choropleth map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Values have found that are higher than the highest break\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n> Note: Values outside the breakpoints that may be essential for analysis\n\n### Color Scheme\n\n**`tmap`** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package\n\n##### ColourBrewer palette\n\nTo change the colour, assign the preferred colour to `palette` argument of `tm_fill()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n\n> Notice that the choropleth map is shaded in green. To reverse the colour shading, add a “-” prefix.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") + # lower data values = deeper green shading\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\n### Map layout\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include map objects, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n##### Map Legend\n\nIn **`tmap`**, several `legend` options are provided to change the placement, format and appearance of the legend.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill('DEPENDENCY', \n          style = 'jenks', \n          palette = 'Blues', \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)',\n            main.title.position = 'center',\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c('right', 'bottom'),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n\n##### Map style\n\n**`tmap`** allows a wide variety of layout settings to be changed. They can be called by using `tmap_style()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"classic\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\n\n> Note: other available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\"\n\n##### Cartographic Furniture\n\n**`tmap`** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines\n\n`tm_compass()`, `tm_scale_bar()` and `tm_grid()` are used to add compass, scale bar and grid lines onto the choropleth map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\n\n> To reset the default style,\n>\n> ::: {.cell}\n> \n> ```{.r .cell-code}\n> tmap_style(\"white\")\n> ```\n> :::\n\n### Drawing Small Multiple Choropleth Maps\n\n**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn **`tmap`**, small multiple maps can be plotted in three ways:\n\n##### Assign multiple values to at least one of the asthetic arguments\n\n-   Define **`ncols`** in **`tm_fill()`**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n\n-   Assign multiple values to at least one of the aesthetic arguments\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\n\n##### Define a group-by variable in `tm_facets()`\n\n-   Create multiple small choropleth maps using **`tm_facets()`**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n\n\n##### Create multiple stand-alone maps with `tmap_arrange()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n\n\n### **Mapping Spatial Object Meeting a Selection Criterion**\n\nUse selection funtion to map spatial objects meeting the selection criterion\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\",])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.outside.size = 0.5,               # ~0.5\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands-On_Ex_2_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n\n\n> Warning: `legend.width` controls the width of the legend within a map. Please use `legend.outside.size` to control the width of the outside legend\n\n# Readings\n\n+----------------------------------------------------------------------------------------------------------------+---------------------------------------------+---------------------------------------------------------------------+---------------------------------------------------------------------------+--------------------------------------------------------------------+----------------+\n| Reference                                                                                                      | Usage                                       | Pros                                                                | Cons                                                                      | Applications                                                       | Notes          |\n+:===============================================================================================================+:============================================+:====================================================================+:==========================================================================+:===================================================================+:===============+\n| [Proportional Symbols](https://www.axismaps.com/guide/univariate/proportional-symbols/ \"Proportional Symbols\") | Scale symbols proportionate to data values  | -   versatile (raw & standardized data)                             | -   congested symbols are hard to read                                    | -   numerical data                                                 | -   congestion |\n|                                                                                                                |                                             |                                                                     |                                                                           |                                                                    |                |\n|                                                                                                                |                                             | -   multivariate encoding                                           | -   size comparison                                                       | -   order categorical data (rating level)                          | -   complexity |\n+----------------------------------------------------------------------------------------------------------------+---------------------------------------------+---------------------------------------------------------------------+---------------------------------------------------------------------------+--------------------------------------------------------------------+----------------+\n| [Choropleth Maps](Choropleth%20Maps)                                                                           | Color intensity proportionate to data value | -   Clear regional trends                                           | -   Small areas with high data values can get overshadowed by large areas | -   %s, rates, pop. density, ...                                   | -   Area bias  |\n|                                                                                                                |                                             |                                                                     |                                                                           |                                                                    |                |\n|                                                                                                                |                                             | -   Clear contrast between intensities                              | -   Color perception is still imperfect                                   | -   data **aggregated over a geographic area** (enumeration units) |                |\n|                                                                                                                |                                             |                                                                     |                                                                           |                                                                    |                |\n|                                                                                                                |                                             | -   Color-coded regions can be compared less subjectively than size |                                                                           |                                                                    |                |\n+----------------------------------------------------------------------------------------------------------------+---------------------------------------------+---------------------------------------------------------------------+---------------------------------------------------------------------------+--------------------------------------------------------------------+----------------+\n\n[Data Classification](https://www.axismaps.com/guide/data/data-classification/ \"The Basics of Data Classification\")\n\n-   defined as grouping a large number of data values into ranges, allowing for data categorisation and subsequent visualisation on a map\n\n-   Purpose\n\n    -   minimize misleading representations or patterns\n\n    -   minimize within-group variance; maximize between-group variance (also method)\n\n-   Methods\n\n    -   Equal interval\n\n    -   Quantile\n\n    -   Manual (based on summary stats or other criteria)\n\n-   Tools (for future reference)\n\n    -   [QGIS](https://www.qgis.org/)\n\n    -   ArcGIS\n\n    -   [D3](https://d3js.org/getting-started) - JS libraries for visualising spatial data (web mapping)\n",
    "supporting": [
      "Hands-On_Ex_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
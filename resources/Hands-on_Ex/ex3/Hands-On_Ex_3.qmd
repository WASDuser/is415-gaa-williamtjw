---
title: "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods"
author: "William"
date: "August 30, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Overview

### Lesson Notes

<details>

![~Distribution of Crime Incidents~](data/img/distribution-of-crime-with-vacant-properties.jpg){fig-align="center"}

-   **Point pattern analysis** (PPA) is the study of the spatial arrangements of points in (usually 2D) space to find out if the pattern is random or the result of something.

    ![](data/img/spatial-ppa.jpg)

-   Spatial PPA Methods

    ![](data/img/spatial-ppa-methods.jpg)

    -   1^st^ order

        -   Density-based

            -   **Kernel density estimation:** compute intensity of a point distribution (Adaptive v. Fixed Bandwidth)

            -   **Quadrat analysis** to obtain variance-mean ratio (VMR: \>0,0,\<0)**:** measure of **dispersion** rather than a measure of **pattern;** single measure for the entire distribution, so **variation within the region are not recognised**

        -   Distance-based

            -   Nearest Neighbour Index

            -   G-function

            -   F-function

            -   K-function

            -   L-function

</details>

### Introduction

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

# Data

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

# Packages

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

# Spatial Data Wrangling

**Import the 3 geospatial datasets.**

```{r}
childcare_sf <- st_read('data/child-care-services-geojson.geojson') %>% st_transform(crs = 3414)
```

> Note that the CRS for `childcare_sf` is WGS84, not SVY21.

```{r}
childcare_sf3414 <- st_transform(childcare_sf, crs = 3414)
```

**To check,**

```{r}
st_geometry(childcare_sf3414)
```

```{r}
sg_sf <- st_read(dsn = 'data/', layer = 'CostalOutline')
```

```{r}
mpsz_sf <- st_read(dsn = 'data/', layer = 'MP14_SUBZONE_WEB_PL')
```

**Ensure that they are projected in same projection system**

```{r}
st_crs(childcare_sf3414)
```

```{r}
st_crs(sg_sf)
```

```{r}
st_crs(mpsz_sf)
```

> Note that even though `mpsz_sf` and `sg_sf` are projected in svy21, the EPSG codes are 9001 instead of 3414.

**Use `st_set_crs()` of sf package to assign the correct EPSG code**

```{r}
sg_sf3414 <- st_set_crs(sg_sf, 3414)
```

```{r}
mpsz_sf3414 <- st_set_crs(mpsz_sf, 3414)
```

**To check,**

```{r}
st_crs(sg_sf3414)
```

```{r}
st_crs(mpsz_sf3414)
```

```{r}
st_geometry(sg_sf3414)
```

```{r}
st_geometry(mpsz_sf3414)
```

### **Plotting to show spatial patterns**

```{r}
tmap_mode('plot')
tm_shape(mpsz_sf3414) + tm_polygons() +
  tm_shape(childcare_sf3414) + tm_dots()
```

> Notice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

> This is the default background of the internet map layer: ESRI.WorldGrayCanvas. Currently, three internet map layers: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap.

```{r}
tmap_mode('plot')
```

> Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.

# **Geospatial Data wrangling**

Many geospatial analysis packages require the input geospatial data in sp’s Spatial\* classes.

### **Converting sf data frames to sp’s Spatial\* class**

```{r}
childcare <- as_Spatial(childcare_sf3414)
sg <- as_Spatial(sg_sf3414)
mpsz <- as_Spatial(mpsz_sf3414)
```

**Examine the information of these three Spatial\* classes.**

```{r}
structure(childcare) # class: SpatialPointsDataFrame
```

```{r}
structure(sg) # class: SpatialPolygonsDataFrame
```

```{r}
structure(mpsz) # class: SpatialPolygonsDataFrame
```

### **Converting the Spatial\* class into generic sp format**

```{r}
childcare_sp <- as(childcare, 'SpatialPoints')
sg_sp <- as(sg, 'SpatialPolygons')
mpsz_sp <- as(mpsz, 'SpatialPolygons')
```

```{r}
childcare_sp
```

```{r}
sg_sp
```

```{r}
mpsz_sp
```

### **Converting the generic sp format into spatstat’s ppp format**

Use `as.ppp()` function of `spatstat` to convert the spatial data into `spatstat`’s `ppp` object format

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Plot `childcare_ppp`

```{r}
plot(childcare_ppp)
```

Examine the ppp object's summary stats.

```{r}
summary(childcare_ppp)
```

> Notice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are *simple*, that is, that the points cannot be coincident.

### **Handling duplicated points**

Check for duplicates in the `ppp` object.

```{r}
any(duplicated(childcare_ppp))
```

To count the number of co-incidience points,

```{r}
# multiplicity(childcare_ppp)
```

To count how many locations have more than one point event,

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

View the locations of these duplicate point events using `childcare`.

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

> Darker spots indicate duplicate point events

```{r}
tmap_mode('plot')
```

#### Solutions

-   The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

-   The second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

-   The third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

**Jittering approach:**

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
# rjitter applies independent random displacements to each point in a point pattern.
```

```{r}
sum(multiplicity(childcare_ppp_jit)>1)
```

### **Creating owin object**

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.n

**Covert *sg* SpatialPolygon object into owin object of spatstat.**

```{r}
sg_owin <- as.owin(sg_sf)
```

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

### **Combining point events object and owin object**

**Extract childcare events that are located within Singapore**

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

# 

# References

-   [Intro to GIS and Spatial Analysis](https://mgimond.github.io/Spatial/index.html)

-   [POINT PATTERN ANALYSIS](https://storymaps.arcgis.com/stories/2d7ebcc8ae5c4df3b8ad56a3e9a82317)

-   [spatstat](https://cran.r-project.org/web/packages/spatstat/)

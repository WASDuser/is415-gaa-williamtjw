---
title: "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis Methods"
author: "William"
date: "August 30, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Overview

### Lesson Notes

<details>

![~Distribution of Crime Incidents~](data/img/distribution-of-crime-with-vacant-properties.jpg){fig-align="center"}

-   **Point pattern analysis** (PPA) is the study of the spatial arrangements of points in (usually 2D) space to find out if the pattern is random or the result of something.

    ![](data/img/spatial-ppa.jpg)

-   Spatial PPA Methods

    ![](data/img/spatial-ppa-methods.jpg)

    -   1^st^ order

        -   Density-based

            -   **Kernel density estimation:** compute intensity of a point distribution (Adaptive v. Fixed Bandwidth)

            -   **Quadrat analysis** to obtain variance-mean ratio (VMR: \>0,0,\<0)**:** measure of **dispersion** rather than a measure of **pattern;** single measure for the entire distribution, so **variation within the region are not recognised**

        -   Distance-based

            -   Nearest Neighbour Index

            -   G-function

            -   F-function

            -   K-function

            -   L-function

</details>

### Introduction

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

# **1st Order Spatial Point Patterns Analysis**

## Data

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

## Packages

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

## Spatial Data Wrangling

**Import the 3 geospatial datasets.**

```{r}
childcare_sf <- st_read('data/child-care-services-geojson.geojson') %>% st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = 'data/', layer = 'CostalOutline')
```

```{r}
mpsz_sf <- st_read(dsn = 'data/', layer = 'MP14_SUBZONE_WEB_PL')
```

**Ensure that they are projected in same projection system**

```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(sg_sf)
```

```{r}
st_crs(mpsz_sf)
```

> Note that even though `mpsz_sf` and `sg_sf` are projected in svy21, the EPSG codes are 9001 instead of 3414.

**Use `st_set_crs()` of sf package to assign the correct EPSG code**

```{r}
sg_sf3414 <- st_set_crs(sg_sf, 3414)
```

# References

-   [Intro to GIS and Spatial Analysis](https://mgimond.github.io/Spatial/index.html)

-   [POINT PATTERN ANALYSIS](https://storymaps.arcgis.com/stories/2d7ebcc8ae5c4df3b8ad56a3e9a82317)

-   [spatstat](https://cran.r-project.org/web/packages/spatstat/)

---
title: "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis (SPPA) Methods"
author: "William"
date: "August 30, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Overview

### Lesson Notes

<details>

![~Distribution of Crime Incidents~](data/img/distribution-of-crime-with-vacant-properties.jpg){fig-align="center"}

-   **Point pattern analysis** (PPA) is the study of the spatial arrangements of points in (usually 2D) space to find out if the pattern is random or the result of something.

    ![](data/img/spatial-ppa.jpg)

-   Spatial PPA Methods

    ![](data/img/spatial-ppa-methods.jpg)

    -   1^st^ order

        -   Density-based

            -   **Kernel density estimation:** compute intensity of a point distribution (Adaptive v. Fixed Bandwidth)

            -   **Quadrat analysis** to obtain variance-mean ratio (VMR: \>0,0,\<0)**:** measure of **dispersion** rather than a measure of **pattern;** single measure for the entire distribution, so **variation within the region are not recognised**

        -   Distance-based

            -   Nearest Neighbour Index

            -   G-function

            -   F-function

            -   K-function

            -   L-function

### Extra References (Prof. Luc Anselin on point pattern analysis (YouTube):)

-   [Point Pattern Analysis Concepts](https://www.youtube.com/watch?v=BN94XXT6Io4)

-   [Point Pattern Analysis: Clustered, Regular and Dispersed Patterns](https://www.youtube.com/watch?v=FdcTgcOdAUg)

+---------------------+-------------------------------------------------------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------+
| Pattern             | Definition                                            | Statistical Implication                                  | Sources                                                                                              |
+=====================+=======================================================+==========================================================+======================================================================================================+
| Clustered           | -   Events that are more grouped than expected of CSR | -   smaller within-cluster distance between points       | -   contagion (event presence increases probability of events nearby)                                |
|                     |                                                       |                                                          |                                                                                                      |
|                     |                                                       | -   bigger btwn-cluster distance                         | -   heterogeneity (no correlations; could be parent-offspring clusters; homogenous geography)        |
|                     |                                                       |                                                          |                                                                                                      |
|                     |                                                       | -   overdispersion (var. \> mean)                        |                                                                                                      |
+---------------------+-------------------------------------------------------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------+
| Dispersed / Uniform | -   opposite of clustered                             | -   opposite of clustered                                | -   competition between entities (their distancing modelled as min. allowed distance between points) |
+---------------------+-------------------------------------------------------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------+
| Random              | -   neither one from the above                        | -   every point in space follows a Uniform dist.         |                                                                                                      |
|                     |                                                       |                                                          |                                                                                                      |
|                     | -   referred to as a "hypothetical" pattern           | -   Number of events in any area follows a Poisson dist. |                                                                                                      |
|                     |                                                       |                                                          |                                                                                                      |
|                     | -   constant intensity                                |                                                          |                                                                                                      |
+---------------------+-------------------------------------------------------+----------------------------------------------------------+------------------------------------------------------------------------------------------------------+

-   [Point Pattern Analysis: Nearest Neighbor Statistics](https://is415-ay2024-25t1.netlify.app/outline/%E2%80%A2%20Point%20Pattern%20Analysis:%20Nearest%20Neighbor%20Statistics)

| Terminology             | Detail                                                                                                                                                     |
|-------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Event                   | Actual observed location of an occurrence                                                                                                                  |
| Point                   | Reference points, which may not coincide with event locations                                                                                              |
| Event-to-Event Distance | Distance between two event points.                                                                                                                         |
| Point-to-Event Distance | Distance from a reference point to the nearest event                                                                                                       |
| Edge Corrections        | adjustments made to account for boundary effects, where the points near the edges of a study area might have neighboring events outside the study boundary |
| Envelopes               | simulations are used to create a reference distribution under CSR                                                                                          |

-   [Point Pattern Analysis: Quadrat Counts](https://www.youtube.com/watch?v=Ww95WKxUoZk)

-   [Point Pattern Analysis: F and J Functions](https://www.youtube.com/watch?v=uNpbf7Y6WM8)

-   [Point Pattern Analysis: K, L and Kd Functions](https://www.youtube.com/watch?v=oT_jMTkkld8)

+--------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+
| Functions    | Use                                                                                      | Interpretation                                                                                      |
+==============+==========================================================================================+=====================================================================================================+
| F            | Measures point-to-event nearest neighbor distances                                       | -   **Above the CSR line**: Suggests regularity or inhibition (points are more spread out).         |
|              |                                                                                          |                                                                                                     |
|              |                                                                                          | -   **Below the CSR line**: Indicates clustering (points are closer together).                      |
+--------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+
| G            | Measures (only Nearest Neighbor) distances among events                                  | -   **Above the Envelope:** Indicates clustering, where many events are close together.             |
|              |                                                                                          |                                                                                                     |
|              |                                                                                          | -   **Below the Envelope:** Suggests regularity or inhibition, where events are more evenly spaced. |
+--------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+
| (Ripley's) K | Measures the expected number of points within a distance rrr of a randomly chosen point  |                                                                                                     |
|              |                                                                                          |                                                                                                     |
|              | -   Limitation of nearest neighbor distance method is that it uses only nearest distance |                                                                                                     |
|              |                                                                                          |                                                                                                     |
|              | -   Considers only the shortest scales of variation.                                     |                                                                                                     |
|              |                                                                                          |                                                                                                     |
|              | -   K function uses more points.                                                         |                                                                                                     |
|              |                                                                                          |                                                                                                     |
|              |     -   Provides an estimate of spatial dependence over a wider range of scales.         |                                                                                                     |
|              |                                                                                          |                                                                                                     |
|              |     -   Based on all the distances between events in the study area.                     |                                                                                                     |
|              |                                                                                          |                                                                                                     |
|              |     -   Assumes isotropy over the region.                                                |                                                                                                     |
+--------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+
| L            |                                                                                          |                                                                                                     |
+--------------+------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------+

</details>

### Introduction

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

# Data

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

# Packages

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

> Before doing random evaluation, consider using `set.seed()` for reproducible results (for debugging).
>
> \- [Source](https://stackoverflow.com/questions/13605271/reasons-for-using-the-set-seed-function)

# Spatial Data Wrangling

**Import the 3 geospatial datasets.**

```{r}
childcare_sf <- st_read('data/child-care-services-geojson.geojson') %>% st_transform(crs = 3414)
```

> Note that the CRS for `childcare_sf` is WGS84, not SVY21.

```{r}
childcare_sf3414 <- st_transform(childcare_sf, crs = 3414)
```

**To check,**

```{r}
st_geometry(childcare_sf3414)
```

```{r}
sg_sf <- st_read(dsn = 'data/', layer = 'CostalOutline')
```

```{r}
mpsz_sf <- st_read(dsn = 'data/', layer = 'MP14_SUBZONE_WEB_PL')
```

**Ensure that they are projected in same projection system**

```{r}
st_crs(childcare_sf3414)
```

```{r}
st_crs(sg_sf)
```

```{r}
st_crs(mpsz_sf)
```

> Note that even though `mpsz_sf` and `sg_sf` are projected in svy21, the EPSG codes are 9001 instead of 3414.

**Use `st_set_crs()` of sf package to assign the correct EPSG code**

```{r}
sg_sf3414 <- st_set_crs(sg_sf, 3414)
```

```{r}
mpsz_sf3414 <- st_set_crs(mpsz_sf, 3414)
```

**To check,**

```{r}
st_crs(sg_sf3414)
```

```{r}
st_crs(mpsz_sf3414)
```

```{r}
st_geometry(sg_sf3414)
```

```{r}
st_geometry(mpsz_sf3414)
```

### **Plotting to show spatial patterns**

```{r}
tmap_mode('plot')
tm_shape(mpsz_sf3414) + tm_polygons() +
  tm_shape(childcare_sf3414) + tm_dots()
```

> Notice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()
```

> This is the default background of the internet map layer: ESRI.WorldGrayCanvas. Currently, three internet map layers: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap.

```{r}
tmap_mode('plot')
```

> Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying ecessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.

# **Geospatial Data wrangling**

Many geospatial analysis packages require the input geospatial data in sp’s Spatial\* classes.

### **Converting sf data frames to sp’s Spatial\* class**

```{r}
childcare <- as_Spatial(childcare_sf3414)
sg <- as_Spatial(sg_sf3414)
mpsz <- as_Spatial(mpsz_sf3414)
```

**Examine the information of these three Spatial\* classes.**

```{r}
structure(childcare) # class: SpatialPointsDataFrame
```

```{r}
structure(sg) # class: SpatialPolygonsDataFrame
```

```{r}
structure(mpsz) # class: SpatialPolygonsDataFrame
```

### **Converting the Spatial\* class into generic sp format**

```{r}
childcare_sp <- as(childcare, 'SpatialPoints')
sg_sp <- as(sg, 'SpatialPolygons')
mpsz_sp <- as(mpsz, 'SpatialPolygons')
```

```{r}
childcare_sp # SpatialPoints
```

```{r}
sg_sp # SpatialPolygons
```

```{r}
mpsz_sp # SpatialPolygons
```

### **Converting the generic sp format into spatstat’s ppp format**

Use `as.ppp()` function of `spatstat` to convert the spatial data into `spatstat`’s `ppp` object format

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Plot `childcare_ppp`

```{r}
plot(childcare_ppp)
```

Examine the ppp object's summary stats.

```{r}
summary(childcare_ppp)
```

> Notice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are *simple*, that is, that the points cannot be coincident.

### **Handling duplicated points**

Check for duplicates in the `ppp` object.

```{r}
any(duplicated(childcare_ppp))
```

To count the number of co-incidience points,

```{r}
# multiplicity(childcare_ppp)
```

To count how many locations have more than one point event,

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

View the locations of these duplicate point events using `childcare`.

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

> Darker spots indicate duplicate point events

```{r}
tmap_mode('plot')
```

#### Solutions

-   The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

-   The second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

-   The third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

**Jittering approach:**

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
# rjitter applies independent random displacements to each point in a point pattern.
```

```{r}
sum(multiplicity(childcare_ppp_jit)>1)
```

### **Creating owin object**

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.n

**Covert *sg* SpatialPolygon object into owin object of spatstat.**

```{r}
sg_owin <- as.owin(sg_sf)
```

```{r}
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

### **Combining point events object and owin object**

**Extract childcare events that are located within Singapore**

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

# 1^st^ order SPPA using `spatstat`

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,

-   performing **Confirmatory SPPA** by using **Nearest Neighbour (NN)** statistics.

### **KDE (of childcare services in Singapore)**

#### Using automatic bandwidth selection method

Compute a **kde** by using the following configurations of [*density()*](https://rdrr.io/cran/spatstat/man/density.ppp.html) of **spatstat**:

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.

-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_childcareSG_bw <- density(
  childcareSG_ppp,
  sigma=bw.diggle,
  edge=TRUE,
  kernel='gaussian')

# 'density()' computes kernel density estimates. Its default method does so with the given kernel and bandwidth for univariate observations.

# 'sigma' computes the covariance matrix of errors (bandwidth of kernel)

# 'edge = TRUE': This parameter adjusts the density estimation near the boundaries to reduce edge effects, which can cause underestimation of densities near the boundaries of the study area
```

```{r}
plot(kde_childcareSG_bw)
```

> The density values of the output range from 0 to 0.000035. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.

Retrieve the bandwidth (sigma) used to compute the **kde** layer.

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

#### Rescalling KDE values

Use `rescale.ppp()` to **convert** the unit of measurement from `m` to `km`

```{r}
childcareSG_ppp_km <- rescale.ppp(childcareSG_ppp,1000,'km')
```

Re-run density() using the rescaled data and plot the **kde** map

```{r}
kde_childcareSG_bw <- density(
  childcareSG_ppp_km,
  sigma=bw.diggle,
  edge=TRUE,
  kernel='gaussian'
)
```

```{r}
plot(kde_childcareSG_bw)
```

> KDE map is similar to the first but with a different scale in the legend

### **Working with different automatic bandwidth methods**

Beside `bw.diggle()`, there are three other **spatstat** functions can be used to determine the bandwidth, they are: `bw.CvL()`, `bw.scott()`, and `bw.ppl()`.

> Some are **aesthetically smoother** than the rest, at the expense of **detail**.

```{r}
bw.CvL(childcareSG_ppp_km)
```

```{r}
bw.scott(childcareSG_ppp_km)
```

```{r}
bw.ppl(childcareSG_ppp_km)
```

```{r}
bw.diggle(childcareSG_ppp_km)
```

Baddeley et. (2016):

-   `bw.ppl()` tends to produce more appropriate values when the pattern consists predominantly of tight clusters

-   if the purpose of once study is to detect a single tight cluster in the midst of random noise then the `bw.diggle()` method seems to work best

`bw.diggle()` v. `bw.ppl()` **output**

```{r}
kde_childcareSG_ppl <- density(
  childcareSG_ppp_km,
  sigma=bw.ppl,
  edge=TRUE,
  kernel='gaussian'
)

par(mfrow=c(1,2))
plot(kde_childcareSG_bw,main='bw.diggle')
plot(kde_childcareSG_ppl,main='bw.ppl')
```

### **Working with different kernel methods**

By default, the kernel method used in *density.ppp()* is *gaussian*. But there are three other options, namely: Epanechnikov, Quartic and Dics.

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp_km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp_km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp_km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp_km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

```{r eval=FALSE}
# If your editor window is too small, might get the error: "Error in plot.new() : figure margins too large".
# By writing 
par(mar=c(1,1,1,1)) 
#instead, the error is fixed; or u could simply resize your window.
```

## **Fixed and Adaptive KDE**

### Compute KDE using fixed BW

```{r}
kde_childcareSG_600 <- density(
  childcareSG_ppp_km,
  sigma=0.6,
  edge=TRUE,
  kernel='gaussian'
)

# sigma = 0.6 instead of 600 because
# childcareSG_ppp_km object is in KILOMETERS
```

```{r}
plot(kde_childcareSG_600)
```

### Compute using adaptive BW

Fixed bandwidth method is very sensitive to highly skewed distribution of spatial point patterns over geographical units (for example urban versus rural). One solution is to use adaptive BW instead.

> **e.g. using kMeans to determine different bandwidth (search radius) to find a fixed number of events across all areas**

*Derive adaptive KDE using* [`density.adaptive()`](https://rdrr.io/cran/spatstat/man/adaptive.density.html) of **spatstat**.

```{r}
kde_childcareSG_adaptive <- adaptive.density(
  childcareSG_ppp_km,
  method = 'kernel' # voronoi, kernel, nearest being the other methods
)
plot(kde_childcareSG_adaptive)
```

Compare the fixed and adaptive KDE outputs.

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG_bw, main = "Fixed BW")
plot(kde_childcareSG_adaptive, main = "Adaptive BW")
```

### **Converting KDE output into grid object**

Convert it so that it is suitable for mapping purposes.

```{r}
gridded_kde_childcareSG_bw <- as(kde_childcareSG_bw,'SpatialGridDataFrame')
spplot(gridded_kde_childcareSG_bw)
```

#### Converting gridded output into raster

Convert the gridded kernal density objects into `RasterLayer` object by using `raster()` of **raster** package

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG_bw)
```

```{r}
kde_childcareSG_bw_raster # min value differs from reference output(?)
```

#### Assigning projection systems

Include the CRS information on `kde_childcareSG_bw_raster` RasterLayer

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

> Note the changes in the 'CRS' property.

### **Visualising the output in `tmap`**

Display the raster in cartographic quality map

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

### **Comparing Spatial Point Patterns using KDE**

Compare KDE of childcare at Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.

**Extract and Plot study areas**

```{r}
pg <- mpsz_sf %>% filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>% filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>% filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>% filter(PLN_AREA_N == "JURONG WEST")
```

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Punggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

**Create `owin` object**

-   convert these `sf` objects into `owin` objects that is required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

**Combine childcare points and the study area**

-   extract childcare that is within the specific region for future analysis

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

-   convert `m` to `km` using `rescale.ppp()`

```{r}
childcare_pg_ppp_km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp_km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp_km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp_km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

-   plot these four study areas and the locations of the childcare centres

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp_km, main="Punggol")
plot(childcare_tm_ppp_km, main="Tampines")
plot(childcare_ck_ppp_km, main="Choa Chu Kang")
plot(childcare_jw_ppp_km, main="Jurong West")
```

-   compute KDE (`bw.diggle` method is used to derive each of the bandwidth)

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp_km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp_km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
plot(density(childcare_ck_ppp_km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp_km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

-   Compute fixed bandwidth KDE (250m for comparison)

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp_km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp_km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
plot(density(childcare_pg_ppp_km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp_km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## **Nearest Neighbour Analysis**

Perform the **Clark-Evans test of aggregation** for a spatial point pattern by using [`clarkevans.test()`](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.

This test measures whether a spatial point pattern is more regular (evenly spaced) or more clustered than a random distribution.

-   H~o~ = The distribution of childcare services are randomly distributed (CSR).

-   H~1~= The distribution of childcare services are not randomly distributed.

-   95% confidence level

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"), # type of alternative for the hypothesis test
                nsim=99                     # Number of Monte Carlo simulations to perform                                                 independent simulation of events
  )
clark
# clarkevans test is a crude measure of clustering or ordering of a point pattern.

# This very small p-value (and <0.05) indicates strong evidence against Ho, suggesting that the spatial pattern childcareSG_ppps is significantly different from CSR.
```

### **Clark and Evans Test: Choa Chu Kang planning area**

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"), # check for deviations in both directions—whether the pattern is more regular or more clustered.
                nsim=999)

# p-value < 0.05: no statistical evidence that the spatial pattern in childcare_ck_ppp is different from CSR
```

### **Clark and Evans Test: Tampines planning area**

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)

# same conclusion as above
```

# 2^nd^ order SPPA

### Using G-function

-   measures the distribution of the distances from an arbitrary event to its nearest event

#### Choa Chu Kang Planning Area

Compute G-function using `Gest()` of **spatat** package.

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

Test for CSR:

-   Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

-   H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

-   The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

Repeat the above steps for the other areas

#### Tampines Planning Area

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

### **Using F-Function**

-   estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape

#### **Choa Chu Kang planning area**

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

#### **Tampines planning area**

```{r}
F_tm = Gest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

### **Using K-Function**

-   measures the number of events found up to a given distance of any particular event

#### **Choa Chu Kang planning area**

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, global=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

#### **Tampines planning area**

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, global=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

### Using L-Function

#### **Choa Chu Kang planning area**

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, global=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

#### Tampines planning area

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, global=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```

# References

-   [Intro to GIS and Spatial Analysis](https://mgimond.github.io/Spatial/index.html)

-   [POINT PATTERN ANALYSIS](https://storymaps.arcgis.com/stories/2d7ebcc8ae5c4df3b8ad56a3e9a82317)

-   [spatstat](https://cran.r-project.org/web/packages/spatstat/)

---
title: "Hands-on Exercise 1"
author: "William"
date: "August 17, 2024"
---

# Overview

This will be my first experience with R programming to perform geospatial data science tasks by using **sf** and **tidyverse** packages.

# Objectives

-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,

-   importing geospatial data by using appropriate functions of **sf** package,

-   importing aspatial data by using appropriate function of **readr** package,

-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,

-   assigning or transforming coordinate systems by using using appropriate *sf* functions,

-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,

-   performing geoprocessing tasks by using appropriate functions of **sf** package,

-   performing data wrangling tasks by using appropriate functions of **dplyr** package and

-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.

# Getting Started

### Selecting Data (for the purpose of this exercise, these have been chosen)

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)

-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

### Extracting Relevant Data

In my exercise folder, I will be creating a "data" sub-folder containing a "geospatial" folder, where the `Master Plan 2014 Subzone Boundary (Web)`, `Pre-Schools Location` and `Cycling Path` data files will be in; and a "aspatial" folder where the `listing` data file will be in.

### Loading Packages

These R packages will be used:

-   **sf** for importing, managing, and processing geospatial data, and

-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

Tidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:

-   **readr** for importing csv data,

-   **readxl** for importing Excel worksheet,

-   **tidyr** for manipulating data,

-   **dplyr** for transforming data, and

-   **ggplot2** for visualising data

Run the following code chunk below.

```{r}
pacman::p_load(sf, tidyverse)
# p_load() from the pacman package checks if the sf and tidyverse packages are installed; if present, the packages specified will be loaded
```

# Importing Geospatial Data

I will be importing the following data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,

-   `CyclingPath`, a line feature layer in ESRI shapefile format, and

-   `PreSchool`, a point feature layer in kml file format.

### **Importing polygon feature data in shapefile format**

The code chunk below uses *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame.

Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: `dsn` to define the data path and `layer` to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.

```{r}
mpsz = st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP/", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

### **Importing polyline feature data in shapefile form**

Dataset used: `CyclingPathGazette` File format: shapefile Data frame type: line feature

```{r}
cyclingpath = st_read(dsn = "data/geospatial/CyclingPath_Jul2024/", 
                      layer = "CyclingPathGazette")
```

From the output message, we can see that in our `cyclingpath` linestring feature data frame, there are 1625 linestring features, 2 fields and is in the **svy21** projected coordinates system.

### **Importing GIS data in kml format**

The `PreSchoolsLocation` is in kml format. The code chunk below will be used to import the kml into R. Notice that in the code chunk below, the complete path and the kml file extension were provided.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

The message above reveals that `preschool` is a point feature data frame. There are a total of 2290 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **wgs84** coordinates system.

# Methods to Check the Content of A Simple Feature Data Frame

### **st_geometry()**

The column in the sf data.frame that contains the geometries is a list, of class `sfc`. Use *st_geometry()* to retrieve the geometry list-column as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

Notice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.

### **glimpse()**

Beside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find *glimpse()* of **dplyr**. very handy as shown in the code chunk below.

```{r}
glimpse(mpsz)
```

*glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.

### **head()**

head() to reveal top n entries of a feature object.

```{r}
head(mpsz, n=5)
```

> Note: One of the useful argument of *head()* is it allows user to select the numbers of record to display (i.e.Â the n argument)

# Plotting Geospatial Data

I will be using plot() of R Graphic to **visualize** geospatial features.

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

> Note: *plot()* is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used.

# Projection Transformation

To perform geoprocessing using two geospatial data, it is important that both geospatial data are projected using similar coordinate systems.

Hence, I will be projecting a simple feature data frame from one coordinate system to another coordinate system.

### **Assigning EPSG code to a simple feature data frame**

During the importing of geospatial data into R, the coordinate system of the source data can be either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned.

This is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

*st_set_crs()* of **sf** package to assign the correct EPSG code to `mpsz` data frame.

```{r warning=FALSE}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Check the CSR.

```{r}
st_crs(mpsz3414)
```

Notice that the EPSG code is 3414 now.

### **Transforming the projection of preschool from wgs84 to svy21.**

I will be transforming the original data from geographic coordinate (GCS) system to projected coordinate system (PCS) because PCS allows for distance or/and area measurements while GCS is more suited when positional accuracy is needed.

E.g. The preschool simple feature data frame is in wgs84 coordinate system.

```{r}
st_geometry(preschool)
```

This is shows that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

The code chunk below shows the projection transformation.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

> Note: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.

Display the content of preschool3414 sf data frame as shown below.

```{r}
st_geometry(preschool3414)
```

Notice that it is in svy21 projected coordinate system now. In the *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.

# Importing and Converting An Aspatial Data

I will be importing an aspatial data into R environment and save it as a tibble data frame, converting it into a simple feature data frame.

For the purpose of this exercise, the `listings.csv` data downloaded from AirBnb will be used.

### Importing

Since `listings` data set is in csv file format, use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r }
listings <- read_csv("data/aspatial/listings.csv.gz")
```

After importing the data file into R, it is important verify that it has been imported correctly.

The code chunk below shows *list()* of Base R instead of *glimpse()* is used to do the job.

```{r}
list(listings) 
```

The output reveals that `listing` tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** GCS.

### **Creating a simple feature data frame from an aspatial data frame**

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *`coords`* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *`crs`* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 GCS and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 PCS. You can search for other countryâs epsg code by referring to [epsg.io](https://epsg.io/).

-   *`%>%`* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

This is the newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

# Geoprocessing with sf package

Besides providing functions to handling (i.e.Â importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

### Buffering

E.g. The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

Solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

E.g. A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

Solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

> **Warning**: You should not confuse with [st_intersection()](https://r-spatial.github.io/sf/reference/geos_binary_ops.html).

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

> **DIY: Calculate the density of pre-school by planning subzone.**

<details>

<summary>Solution: \<click to reveal\></summary>

<br>

Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

</details>

# Exploratory Data Analysis (EDA)

I will be using appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

> **DIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.**

<details>

<summary>Solution: \<click to reveal\>:</summary>

<br>

```{r warning=FALSE}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

</details>

# Note:

-   {r warning=FALSE} to remove warning messages

-   {r eval=FALSE} can 'hide' output text but potentially important result cannot be referenced later on

-   collapsible sections using `<details></details>`

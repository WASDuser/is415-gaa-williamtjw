---
title: "Hands-On Exercise 6: Measures of Spatial Autocorrelation"
author: "William"
date: "September 20, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Global

I will be computing Global Measures of Spatial Autocorrelation (**GMSA**) by using **`spdep`** package

## Overview

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of **spdep** package,

    -   plot Moran scatterplot,

    -   compute and plot spatial correlogram using appropriate function of **spdep** package.

-   provide statistically correct interpretation of GSA statistics.

## Setup

### Goal

Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is **No**. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”

In this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of [Hunan Provice](https://en.wikipedia.org/wiki/Hunan), People Republic of China.

### Data

-   Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

Before we get started, we need to ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed in your R.

-   sf is use for importing and handling geospatial data in R,

-   tidyverse is mainly use for wrangling attribute data in R,

-   spdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and

-   tmap will be used to prepare cartographic quality chropleth map.

The code chunk below is used to perform the following tasks:

-   creating a package list containing the necessary R packages,

-   checking if the R packages in the package list have been installed in R,

    -   if they have yet to be installed, RStudio will installed the missing packages,

-   launching the packages into R environment.

```{r}
pacman::p_load(sf,spdep,tmap,tidyverse)
```

## Data Wrangling

**Hunan province administrative boundary layer at county level**

```{r}
hunan <- st_read('data/geospatial', layer = 'Hunan')
```

**Hunan_2012 development indicators**

```{r}
hunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')
```

**Update the attribute table of *hunan*’s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* dataframe**

```{r}
hunan <- left_join(hunan,hunan2012) %>% dplyr::select(1:4, 7, 15)
```

**Prepare a basemap and a choropleth map showing the distribution of GDPPC 2012**

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC", n = 5, style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC", n = 5, style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, quantile, asp=1, ncol=2)
```

## Global Measures of Spatial Autocorrelation

### Objectives

-   compute global spatial autocorrelation statistics and

-   perform spatial complete randomness test for global spatial autocorrelation

### **Computing Contiguity Spatial Weights**

**Compute contiguity weight matrices for the study area**

```{r}
# builds a neighbours list based on regions with contiguous boundaries
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

### **Row-standardised weights matrix**

**Assign equal weights (style=“W”) to each neighboring polygon**

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

> -   The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.
>
> -   *style* can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).
>
> -   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.

## Global Measures of Spatial Autocorrelation: Moran’s I

Perform Moran’s I statistics testing by using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep.**

### **Performs Moran’s I statistical test**

```{r}
moran.test(hunan$GDPPC, listw=rswm_q, zero.policy = TRUE, na.action=na.omit)
```

> **Moran I Statistic**:
>
> -   Moran I = 0: No spatial autocorrelation; high GDPPC values are randomly distributed.
>
> ```{=html}
> <!-- -->
> ```
> -   **Moran I \> 0: Positive spatial autocorrelation; high GDPPC values cluster together.**
>
> -   Moran I \< 0: Negative spatial autocorrelation; dissimilar GDPPC are near each other (e.g., high values next to low values).
>
> **Large Moran I statistic standard deviate and Small p-value:** strong statistical evidence against H~0~ (no spatial autocorrelation) and conversely observed clusters of GDPPC is statistically significant.

### **Compute Monte Carlo (MC) Moran’s I**

```{r}
set.seed(6969)
bperm= moran.mc(hunan$GDPPC, listw=rswm_q, nsim=99, zero.policy = TRUE, na.action=na.omit)
bperm
```

> Consistent with previous findings:
>
> -   statistic = 0.30075; positive spatial autocorrelation
>
> -   0.025 \< significance level

### **Visualise Monte Carlo (MC) Moran’s I**

```{r}
mean(bperm$res[1:99])
var(bperm$res[1:99])
summary(bperm$res[1:99])
```

```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

### **Using ggplot2()**

```{r}
library(ggplot2)

simulated_results <- data.frame(bperm$res)

# Create the histogram using ggplot2
ggplot(simulated_results, aes(bperm$res)) +
  geom_histogram(bin=20, fill = "gray", color = "black",) +
  geom_vline(xintercept = 0, color = "red") +
  labs(x = "Simulated Moran's I", 
       y = "Frequency", 
       title = "Histogram of Simulated Moran's I") +
  theme_minimal()
```

## Global Measures of Spatial Autocorrelation: Geary’s C

Perform Geary’s C statistics testing by using appropriate functions of **spdep** package

### **Geary’s C test**

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

> Note:
>
> Same statistical conclusion of std, p-value with Moran's I: significant positive spatial autocorrelation.

## Spatial Correlogram

> An **exploratory** and **descriptive** tool.

Purpose is to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are **plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.**

### **Compute Moran’s I correlogram**

Compute a 6-lag spatial correlogram of GDPPC with base plot()

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

> Note:
>
> The above plot may be incomplete since not all autocorrelation values are statistically significant.

Print the full analysis results

```{r}
print(MI_corr)
```

> Interpretation:

### **Compute Geary’s C correlogram and plot**

Compute a 6-lag spatial correlogram of GDPPC with base plot()

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

```{r}
print(GC_corr)
```

# Local

## Overview

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions **spdep** package;

-   compute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of **spdep** package; and

-   to visualise the analysis output by using **tmap** package.

## Setup

Same as Global Measure

## Data Wrangling

Same as Global

## Local Indicators of Spatial Association(LISA)

## Creating a LISA Cluster Map

## Hot Spot and Cold Spot Area Analysis

## Computing Gi statistics

---
title: "Hands-On Exercise 5: Spatial Weights & Applications"
author: "William"
date: "September 13, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

I will be computing spatial weights using R, following these objectives

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** packa

# Data (uploaded to eLearn)

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

# Packages Required

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)

```

# Data

### Hunan county boundary layer shapefile

```{r}
hunan <- st_read(dsn = 'data/geospatial/', layer = 'Hunan')
```

### Hunan_2012.csv

```{r}
hunan2012 <- read_csv('data/aspatial/Hunan_2012.csv')
```

### Combine using relational join

**`left_join()` of `dplyr` package**

```{r}
hunan <- left_join(hunan,hunan2012)
names(hunan)
hunan <- hunan %>% select(3,7,15,36)
```

# Visualising Regional Development Indicator

```{r}
tmap_mode('plot')

basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text('NAME_3', size=0.5)

# choropleth map showing the distribution of GDPPC 2012
gdppc <- qtm(hunan, 'GDPPC')
tmap_arrange(basemap, gdppc, asp = 1, ncol = 2)
```

> `sasp=1` : aspect ratio
>
> `ncol=2` : number of columns

# Contiguity Spatial Weights Matrices

> Note: contiguity = neighbouring but sounds fancier

[`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **`spdep`** package to compute contiguity weight matrices for the study area

-   builds a neighbours list based on regions with contiguous boundaries.

    -   `queen` argument that takes `TRUE` or `FALSE`

    -   Default = `TRUE`: returns a list of first order neighbours using the Queen criteria.

### Computing (QUEEN) contiguity based neighbours

**Compute Queen contiguity weight matrix that lists all neighboring polygons**

```{r}
wm_q <- poly2nb(
  hunan,
  queen = TRUE,
  # tends to create a larger set of neighbors b/c corner adjacency is allowed
)
summary(wm_q)
```

```{r}
# exploring wm_q:

# Check neighbors for the first polygon in the object.
wm_q[[1]]
```

```{r}
# Get the county name of Polygon ID=1
hunan$County[1]
```

```{r}
# Get the county names of the five neighboring polygons
hunan$NAME_3[c(2,3,4,57,85)]
```

```{r}
# Get GDPPC of the above 5 countries
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

```{r}
# Display the complete weight matrix (Loooong output)
str(wm_q)
```

### Creating (ROOK) contiguity based neighbours

**Compute Rook contiguity weight matrix**

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### Visualising contiguity weights

**Connectivity graph**

-   mapping func `map_dbl()` to apply `st_centriod()` on input vector (geometry column `us.bound`)

-   get lat-long coordinates using `cbind()`

-   compute polygon centroids

-   connect centriods

    ```{r}
    longitude <- map_dbl(
      hunan$geometry,
      ~st_centroid(.x)[[1]]
    )
    ```

    ```{r}
    latitude <- map_dbl(
      hunan$geometry,
      ~st_centroid(.x)[[2]]
    )
    ```

    ```{r}
    coords <- cbind(longitude, latitude)
    head(coords)
    ```

#### Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")

```

#### Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# Computing distance based neighbours

[`dnearneigh()`](https://r-spatial.github.io/spdep/reference/dnearneigh.html) of **spdep** package

> If `x` is an `"sf"` object and `use_s2=` is `TRUE`, spherical distances in **km** are used

### Determine the cut-off distance

Determine the upper limit for distance band:

1.  [`knearneigh()`](https://r-spatial.github.io/spdep/reference/knearneigh.html)

2.  [`knn2nb()`](https://r-spatial.github.io/spdep/reference/knn2nb.html)

3.  [**`unlist()`**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist)

```{r}
k1 <- knn2nb( 
# Convert knn object returned by knearneigh() into a neighbours list of class nb with a list of int vectors containing neighbour region num IDs
  
  knearneigh(coords)
# Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other
  )
k1dists <- unlist(
# Remove the list structure of the returned object
  
  nbdists(k1, coords, longlat = TRUE)
# Return the length of neighbour relationship edges; KM by default
  )
summary(k1dists)
```

> Largest first nearest neighbour distance is **61.79 km**, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### **Compute fixed distance weight matrix**

**Use `dnearneigh()`**

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

> Note: 'Average number of links': each region has 3.68 neigbours with 62km

**Display `wm_d62` weight matrix**

-   structure

    ```{r}
    str(wm_d62)
    ```

-   [`table()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [`card()`](https://r-spatial.github.io/spdep/reference/card.html) of `spdep`

    ```{r}
    table(hunan$County, card(wm_d62))
    ```

    ```{r}
    n_comp <- n.comp.nb(wm_d62)
    n_comp$nc
    ```

    ```{r}
    table(n_comp$comp.id)
    ```

**Plotting fixed distance weight matrix**

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

> Note:
>
> -   red: links of 1st nearest neighbours;
>
> -   black: links of neighbours within the cut-off distance of 62km

### **Computing adaptive distance weight matrix**

Issue of fixed distance weight matrices is that the **denser** urbanised areas tend to have **more neighbours** than less dense, rural areas, smoothing the neighbour relationships across neighbours.

Control the numbers of neighbours directly using k-nearest neighbours, either **accepting asymmetric neighbours** or **imposing symmetry**.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

> Note: each county has **strictly** 6 neighbours

#### **Plotting distance based neighbours**

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# **Weights based on Inverse Distance (IDW)**

### **Derive spatial weight matrix based on IDW method**

-   [`nbdists()`](https://r-spatial.github.io/spdep/reference/nbdists.html)

    ```{r}
    # compute the distances between areas
    dist <- nbdists(
      wm_q,
      coords,
      longlat = TRUE # TRUE if point coords are long.-lat. decimal deg.
      )
    ids <- lapply(dist, function(x) 1/(x))
    ids
    ```

# **Row-standardised Weights Matrix**

-   Assign each neighboring polygon with equal weight (style=“W”).

    -   Assign the inverse of #ofneighbors to each neighboring county then

    -   Sum the weighted income values.

> While this is the most intuitive way to summaries the neighbors’ values it has one **drawback:**
>
> -   Polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially **over- or under-estimating the true nature** of the spatial autocorrelation in the data.
>
> -   For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw( # pairs a neighbours list w. spatial weights for the chosen coding scheme
  wm_q,
  style="W",
  zero.policy = TRUE # allows for lists of non-neighbors
  # Be cautious of missing neighbors in dataset
  )
rswm_q
```

**To see the weight of the first polygon’s eight neighbors type:**

```{r}
rswm_q$weights[10]
# when R computes the avg neighboring income values, each neighbor’s income will be multiplied by .125 before being tallied
```

**Using the same method, derive a row standardised distance weight matrix:**

```{r}
rswm_ids <- nb2listw(
  wm_q,
  glist=ids,
  style="B",
  zero.policy=TRUE
  )
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

# **Applications of Spatial Weight Matrix**

### Spatial lag with row-standardized weights

```{r}
# compute the average neighbor GDPPC value for each polygon
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)

GDPPC.lag # returns spatially lagged values
```

> Previously,

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
# What is the significance of Spatial Lag with row-standardized weights now?
# Each region's spatial lag is the weighted avg of the neighboring regions' values, where the weights == proximity of each neighbor.

# Row-standardization ensures comparability across regions, as the influence of neighbors is relative rather than absolute. This is useful when the number of neighbors varies significantly between spatial units.
```

**Append the spatially lag `GDPPC` values onto hunan sf data frame**

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

```{r}
head(hunan)
```

**Plot both the GDPPC and spatial lag GDPPC**

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial lag as a sum of neighbouring values

Calculate spatial lag as a sum of neighboring values by assigning binary weights"

-   access neighbors list,

-   apply a function that will assign binary weights,

-   explicitly assign these weights by using `glist =` in the `nb2listw` function

    ```{r}
    b_weights <- lapply( 
      # applies a function across each value in the neighbors structure
      # in this case, applies a func that assigns a value of 1 per neighbor

      wm_q, 
      function(x) 0*x + 1
      )
    b_weights2 <- nb2listw(wm_q, 
                           glist = b_weights, 
                           style = "B")
    b_weights2
    ```

    **Use `lag.listw`**

    ```{r}
    lag_sum <- list(
      hunan$NAME_3, 
      
      # compute a lag variable using weights & gdppc
      lag.listw(b_weights2, hunan$GDPPC)
      )
    lag.res <- as.data.frame(lag_sum)
    colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
    ```

    ```{r}
    lag_sum
    ```

    > Spatial lag : Sum of neigbouring values

    **Append the `lag_sumGDPPC` field into `hunan` sf data frame**

    ```{r}
    hunan <- left_join(hunan, lag.res)
    ```

    **Plot both the `GDPPC` and `Spatial Lag Sum GDPPC`**

    ```{r}
    gdppc <- qtm(hunan, "GDPPC")
    lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
    tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
    ```

### Spatial window average

**Use `include.self()` from spdep**

```{r}
# add the diagonal element to the neighbour list
wm_qs <- include.self(wm_q)
```

> Note:
>
> num of nonzero links=536,
>
> %nonzero weights=6.921488,
>
> avg number of links=6.090909 ,
>
> respectively as compared to `wm_q` of 448, 5.785124 and 5.090909

```{r}
wm_qs[[1]]
```

> Note: \[1\] has 6 neighbours instead of 5

**Obtain weights with `nb2listw()`** , **assign weight values with `nb2listw()` and `glist()`**

```{r}
wm_qs <- nb2listw(
  wm_qs,
  )
wm_qs
```

```         
Expected output:

Characteristics of weights list object:
Neighbour list object:
Number of regions: 88 
Number of nonzero links: 536 
Percentage nonzero weights: 6.921488 
Average number of links: 6.090909 

Weights style: W 
Weights constants summary:
   n   nn S0       S1       S2
W 88 7744 88 30.90265 357.5308
```

**Create the lag variable from weight structure and `GDPPC` variable**

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, hunan$GDPPC)
lag_w_avg_gpdpc
```

**Convert the lag variable `listw` object into a data.frame using `as.data.frame()`.**

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

> Note:
>
> The third command line on the code chunk above renames the field names of `lag_wm_q1.res` object into `NAME_3` and `lag_window_avg GDPPC` respectively.

**Append `lag_window_avg GDPPC` values onto `hunan` sf data.frame by using `left_join()` of dplyr package.**

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

**Compare the values of lag GDPPC and Spatial window average using `kable()` of Knitr package**

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Plot the `lag_gdppc` and `w_ave_gdppc` maps

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

> Use core `tmap` functions for better comparison

### Spatial window sum

Spatial window sum is the counter part of the window average, but without using row-standardized weights.

add the diagonal element to the neighbour list, we just need to use `include.self()` from **`spdep`**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

assign binary weights to the neighbour structure that includes the diagonal element

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
# note that theres 6 neighbours now
```

use *nb2listw()* and *glist()* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

compute the lag variable with *lag.listw()*.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

convert the lag variable listw object into a data.frame by using *as.data.frame()*

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

append *w_sum GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.\

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

*qtm()* of **tmap** package is used to plot the lag_sum GDPPC and w_sum_gdppc

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

---
title: "Hands-on Exercise 2: Thematic Mapping & Geovisualisation with R"
author: "William"
date: "August 23, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Overview

**Terms & Concepts**:

-   **Geovisualisation**: The **over-arching concept** that involve any geographic data visualisation technique

-   **Thematic** mapping: Use of map types/symbols to visualise variables that are **not naturally visible** in a geographical area

-   **Choropleth** mapping: Type of thematic mapping to visualise variability across a region using **color**

I will be using these R packages to build cartographic quality thematic maps:

-   **tmap**

-   **tidyverse p**

    -   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

    -   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

    -   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

    -   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.

Load the packages into RStudio.

```{r results='hide'}
pacman::p_load(sf, tmap, tidyverse)
```

# Import Data

### Data

The following datasets will be used to create a choropleth map:

-   [Master Plan 2014 Subzone](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9 "ESRI shapefile")[Boundary](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9)[(Web)](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary+%28Web%29&resultId=d_d14da225fccf921049ab64238ff473d9 "ESRI shapefile") : geospatial data consisting of the geographical boundary of SGP at the planning subzone level

-   [Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data "csv format; aspatial data fie") : does not contain any coordinates values, but it’s PA and SZ fields can be used as UIDs to geocode to `MP14_SUBZONE_WEB_PL` shapefile

### Import Geospatial Data using `st_read()` from `sf`

```{r}
mspz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
mspz
```

> Note: It displays only the first 10 rows (or features) by default. This is a feature of the `sf` package to prevent overwhelming the console with too much information at once, especially when working with large datasets.

Alternatively, use the one of the following code to explore the spatial data without being limited by the default limit

```{r eval=FALSE}
View(mspz) # opens a separate tab to view the data in RStudios
```

```{r}
str(mspz) # check structure
```

### Import Attribute Data using `read_csv()` from `readr` package

Import `respopagsex2011to2020.csv` file into RStudio and save the file into an R dataframe called `popdata`

```{r}
popdata <- read_csv("data/aspatial/respopagesexfa2011to2020.csv")
```

```{r eval=FALSE}
view(popdata)
```

### Data Preparation

Prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

##### Data Wrangling

> [Data wrangling](https://online.hbs.edu/blog/post/data-wrangling) is the process of transforming and structuring data from one raw form into a desired format with the intent of improving data quality and making it more consumable and useful for analytics or machine learning.

Data wrangling & transformation functions used:

-   `pivot_wider()` of **tidyr** package, and

-   `mutate()`, `filter()`, `group_by()` and `select()` of **dplyr** package

```{r}
popdata2020 <- popdata %>%
  # group_by -> summarise -> ungroup
  filter(Time==2020) %>%   # keeps rows where the 'Time' col is 2020
  group_by(PA,SZ,AG) %>%   # needed for summarise() to work
  summarise(POP=sum(Pop)) %>% # summarises GROUPED DATA by summing 'Pop' value in each (PA,SZ,AG) group & stores in new col 'POP'
  ungroup() %>%                   # removes grouping structure, allows us to perform further operations on the data
  pivot_wider(names_from = AG,values_from =POP)  # reshapes data to WIDE format
```

Visualise `popdata2020` dataset before calculating age group totals.

```{r eval=FALSE}
View(popdata2020)
```

```{r}
popdata2020 <- popdata2020 %>% 
  # CALCULATING AGE GROUP TOTALS
  mutate(`YOUNG`=rowSums(.[3:6])+rowSums(.[14])) %>%                # CREATES new col 'YOUNG'
  mutate(`ECONOMY ACTIVE`=rowSums(.[7:13])+rowSums(.[15])) %>%   # CREATES new col `ECONOMY ACTIVE`
  mutate(`AGED`=rowSums(.[16:21])) %>%                              # CREATES new col `AGED`
  mutate(`TOTAL`=rowSums(.[3:21])) %>%                              # CREATES new col `TOTAL`
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%   # CREATES new col `DEPENDENCY` to calculate dependency ratio
  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`) # determines column order and contents in OUTPUT DATASET

```

##### Join attribute and geospatial data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>% 
  mutate_at(.vars = vars(PA,SZ),.funs = list(toupper)) %>% 
  filter(`ECONOMY ACTIVE` > 0)
```

Next, *left_join()* of **dplyr** is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mspz,popdata2020,by = c('SUBZONE_N'='SZ')) # c() is a generic func which combines its args
```

> Note that the format of the **left** data table (`mpsz` simple feature dataframe) is preserved in the output, because of `left_join`

```{r}
write_rds(mpsz_pop2020,'data/rds/mpszpop2020.rds')
```

# Choropleth Mapping Geospatial Data Using `tmap` 

### Using `qtm()` 

Plot a cartographic standard choropleth map

```{r}
tmap_mode("plot")         # produce a static map; for interactive mode, “view” option should be used.
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")  # map the attribute (i.e. DEPENDENCY)
```

### Using `tmap` elements

Despite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, **tmap**’s drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill('DEPENDENCY', 
          style = 'quantile', 
          palette = 'Blues',
          title = "Dependency ratio") +
  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',
            main.title.position = 'center',
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type='8star', size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits('Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS', position = c("left", "bottom"))
```

##### Plotting the base map

`tm_shape()` followed by one or more layer elements such as `tm_fill()` and `tm_polygons()`

```{r}
tm_shape(mpsz_pop2020) + tm_polygons()
# tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons
```

##### Plotting a choropleth map using `tm_polygons()`

Assign the target variable such as Dependency to `tm_polygons()`.

```{r}
tm_shape(mpsz_pop2020)+tm_polygons("DEPENDENCY")
# The default interval binning used to draw the choropleth map is called “pretty”.
# The default colour scheme used is YlOrRd of ColorBrewer.
# By default, Missing value will be shaded in grey.
```

##### Plotting a choropleth map using `tm_fill()` and `tm_border()` 

`tm_fill()` shades the polygons by using the default colour scheme and `tm_borders()` adds the borders of the shapefile onto the choropleth map

Without borders,

```{r}
tm_shape(mpsz_pop2020)+tm_fill("DEPENDENCY")
```

With borders,

```{r}
tm_shape(mpsz_pop2020)+tm_fill("DEPENDENCY") +
  tm_borders(lwd = .1,  alpha = 1) # adds the boundary of the planning subzones
# The alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).

# Arguments for tm_borders():

# col = border colour,
# lwd = border line width. The default is 1, and
# lty = border line type. The default is “solid”.
```

### Data classification methods of `tmap`

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**`tmap`** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the `style` argument of `tm_fill()` or `tm_polygons()` will be used.

#### Plotting choropleth maps with built-in classification methods (n=5 and n=20)

##### quantile

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,                 # 5 classes
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,                 # 20 classes
          style = "quantile") +
  tm_borders(alpha = 0.5)
```

##### equal

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,                 # 20 classes
          style = "equal") +
  tm_borders(alpha = 0.5)
```

> Notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.

> DIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.

##### sd

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "sd") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,                 # 20 classes
          style = "sd") +
  tm_borders(alpha = 0.5)
```

##### pretty (default)

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "pretty") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,                 # 20 classes
          style = "pretty") +
  tm_borders(alpha = 0.5)
```

##### kmeans

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,                 # 20 classes
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

##### hclust

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "hclust") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,                 # 20 classes
          style = "hclust") +
  tm_borders(alpha = 0.5)
```

##### bclust

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "bclust") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,                 # 20 classes
          style = "bclust") +
  tm_borders(alpha = 0.5)
```

##### fisher

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "fisher") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,                 # 20 classes
          style = "fisher") +
  tm_borders(alpha = 0.5)
```

##### jenks

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,                 # 20 classes
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

#### Plotting choropleth map with custom break

For all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the `breaks` argument to the `tm_fill()`. In **`tmap`** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the `breaks` option (ascending order).

Compute and display the descriptive statistics of **DEPENDENCY** field

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

-   With reference to the results above, set break point at 0.60, 0.70, 0.80, and 0.90.

-   Include a minimum and maximum at 0 and 1.00.

-   Hence `c(0, 0.60, 0.70, 0.80, 0.90, 1.00)`

Plot the choropleth map

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

> Note: Values outside the breakpoints that may be essential for analysis

### Color Scheme

**`tmap`** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package

##### ColourBrewer palette

To change the colour, assign the preferred colour to `palette` argument of `tm_fill()`

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```

> Notice that the choropleth map is shaded in green. To reverse the colour shading, add a “-” prefix.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

> Notice that the colour scheme has been reversed.

### Map layout

Map layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.

##### Map Legend

In **`tmap`**, several `legend` options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill('DEPENDENCY', 
          style = 'jenks', 
          palette = 'Blues', 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone \n(Jenks classification)',
            main.title.position = 'center',
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c('right', 'bottom'),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

##### Map style

**`tmap`** allows a wide variety of layout settings to be changed. They can be called by using `tmap_style()`

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

> Note: other available styles are: "white", "gray", "natural", "cobalt", "col_blind", "albatross", "beaver", "bw", "watercolor"

##### Cartographic Furniture

**`tmap`** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines

`tm_compass()`, `tm_scale_bar()` and `tm_grid()` are used to add compass, scale bar and grid lines onto the choropleth map

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

> To reset the default style,
>
> ``` R
> {r}
> tmap_style("white")
> ```

### Drawing Small Multiple Choropleth Maps

**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.

In **`tmap`**, small multiple maps can be plotted in three ways:

##### Assign multiple values to at least one of the asthetic arguments

-   Define **`ncols`** in **`tm_fill()`**

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

-   Assign multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

##### Define a group-by variable in `tm_facets()`

Create multiple small choropleth maps using **`tm_facets()`**.

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

Create multiple stand-alone maps with `tmap_arrange()`.

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

### **Mapping Spatial Object Meeting a Selection Criterion**

Use selection funtion to map spatial objects meeting the selection criterion

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION",])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.outside.size = 0.5,               # ~0.5
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

> Warning: `legend.width` controls the width of the legend within a map. Please use `legend.outside.size` to control the width of the outside legend

# Readings

+----------------------------------------------------------------------------------------------------------------+---------------------------------------------+---------------------------------------------------------------------+---------------------------------------------------------------------------+--------------------------------------------------------------------+----------------+
| Reference                                                                                                      | Usage                                       | Pros                                                                | Cons                                                                      | Applications                                                       | Notes          |
+:===============================================================================================================+:============================================+:====================================================================+:==========================================================================+:===================================================================+:===============+
| [Proportional Symbols](https://www.axismaps.com/guide/univariate/proportional-symbols/ "Proportional Symbols") | Scale symbols proportionate to data values  | -   versatile (raw & standardized data)                             | -   congested symbols are hard to read                                    | -   numerical data                                                 | -   congestion |
|                                                                                                                |                                             |                                                                     |                                                                           |                                                                    |                |
|                                                                                                                |                                             | -   multivariate encoding                                           | -   size comparison                                                       | -   order categorical data (rating level)                          | -   complexity |
+----------------------------------------------------------------------------------------------------------------+---------------------------------------------+---------------------------------------------------------------------+---------------------------------------------------------------------------+--------------------------------------------------------------------+----------------+
| [Choropleth Maps](Choropleth%20Maps)                                                                           | Color intensity proportionate to data value | -   Clear regional trends                                           | -   Small areas with high data values can get overshadowed by large areas | -   %s, rates, pop. density, ...                                   | -   Area bias  |
|                                                                                                                |                                             |                                                                     |                                                                           |                                                                    |                |
|                                                                                                                |                                             | -   Clear contrast between intensities                              | -   Color perception is still imperfect                                   | -   data **aggregated over a geographic area** (enumeration units) |                |
|                                                                                                                |                                             |                                                                     |                                                                           |                                                                    |                |
|                                                                                                                |                                             | -   Color-coded regions can be compared less subjectively than size |                                                                           |                                                                    |                |
+----------------------------------------------------------------------------------------------------------------+---------------------------------------------+---------------------------------------------------------------------+---------------------------------------------------------------------------+--------------------------------------------------------------------+----------------+

[Data Classification](https://www.axismaps.com/guide/data/data-classification/ "The Basics of Data Classification")

-   defined as grouping a large number of data values into ranges, allowing for data categorisation and subsequent visualisation on a map

-   Purpose

    -   minimize misleading representations or patterns

    -   minimize within-group variance; maximize between-group variance (also method)

-   Methods

    -   Equal interval

    -   Quantile

    -   Manual (based on summary stats or other criteria)

-   Tools (for future reference)

    -   [QGIS](https://www.qgis.org/)

    -   ArcGIS

    -   [D3](https://d3js.org/getting-started) - JS libraries for visualising spatial data (web mapping)

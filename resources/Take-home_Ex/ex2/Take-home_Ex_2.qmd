---
title: "Take-Home Exercise 2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level"
author: "William"
date: "September 23, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Background

Nothing for now.

# Terms

-   Thailand administrative level 0 (country): **admin0**,

-   1 (province): **admin1**

-   2 (district): **admin2**

-   3 (sub-district, tambon): **admin3**

For the purposes of this exercise I will be dealing with **admin1** only (province-level).

# Objectives

# R Packages used

-   sf

-   tidyverse

-   [**readxl**](https://readxl.tidyverse.org/): since both datasets are in xls/xlsx format

-   skimr

-   sfdep

-   tmap

-   fitdist: finding out distribution type to match to match tmap style

```{r}
pacman::p_load(sf,tidyverse,skimr,readxl,sfdep,tmap,fitdistrplus)
```

# Data

::: panel-tabset
## \[.csv\] Thailand Drug Offenses 2017-2022

[**Source**](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022)

**Metadata**

-   fiscal_year: recorded year

-   types_of_drug_offenses: category of offense

-   no_cases: total records for combination of year, drug offense type and province

-   province_th: province name in thai (**drop**)

-   province_en

**Import**

```{r}
thai_drug_offences_sf <- read_csv('data/aspatial/thai_drug_offenses_2017_2022.csv')
```

```{r}
#| eval: false
str(thai_drug_offences_sf)
```

```{r}
#| eval: false
summ_table <- skim(thai_drug_offences_sf) %>% as.data.frame()
summ_table
```

> -   No missing data
>
> -   Date range is indeed 2017 to 2022
>
> -   16 types of drug offenses (check unique values)
>
> -   summary statistics of overall **`no_cases`** seem to indicate **right-skew**

```{r}
#| eval: false
thai_no_case <- summ_table %>% filter(skim_variable == 'no_cases') %>% select(c(10:16))
thai_no_case
```

> Might need to view by offense type to see offense-specific distributions

Identify the unique values for each categorical column

```{r}
#| eval: false
unique(thai_drug_offences_sf$fiscal_year)
```

```{r}
#| eval: false
offense_type <- unique(thai_drug_offences_sf$types_of_drug_offenses)
offense_type
```

**Cleaning**

Remove thai labels

```{r}
thai_drug_offences_sf <- thai_drug_offences_sf %>% dplyr::select(1,2,3,5)
```

## \[.shp\] Thailand - Subnational Admin. Boundaries

[**Source**](https://data.humdata.org/dataset/d24bdc45-eb4c-4e3d-8b16-44db02667c27/resource/d0c722ff-6939-4423-ac0d-6501830b1759/download/tha_adm_rtsd_itos_20210121_shp.zip)

**Import**

```{r}
thai_admin1_sf <- st_read(
  dsn = 'data/geospatial/tha_adm_rtsd_itos_20210121_shp/',
  layer ='tha_admbnda_adm1_rtsd_20220121')
```

```{r}
#| eval: false
glimpse(thai_admin1_sf)
```

**Extracting Columns**

Lots of completely missing fields and repetition across the columns.

```{r}
thai_admin1_sf <- thai_admin1_sf %>% dplyr::select(1:3,5)
thai_admin1_sf
```

```{r}
#| eval: false
any(duplicated(thai_admin1_sf))
```
:::

## Relational Join

```{r}
set.seed(69)
```

```{r}
province_drug_offences <- thai_drug_offences_sf %>% 
  group_by(province_en) %>%
  summarize(total_cases = sum(no_cases), .groups = 'drop')
head(province_drug_offences)
```

```{r}
combined_prepped_drug_offences_ <- left_join(province_drug_offences, thai_admin1_sf,by = c('province_en'='ADM1_EN')) %>% st_as_sf()
glimpse(combined_prepped_drug_offences_)
```

```{r}
#| eval: false
tmap_mode('plot')

tm_shape(combined_prepped_drug_offences_)+
  tm_polygons() +
  tm_fill(alpha = .5,col = combined_prepped_drug_offences_$total_cases)
  tm_text(combined_prepped_drug_offences_$province_en)
```

This is where I encountered the first landmine of sorts. The above code results in:

``` r
Error in `$<-`:
! Assigned data `as.numeric(...)` must be compatible with existing data.
✖ Existing data has 77 rows.
✖ Assigned data has 75 rows.
ℹ Only vectors of size 1 are recycled.
Caused by error in `vectbl_recycle_rhs_rows()`:
! Can't recycle input of size 75 to size 77.
```

So I went to re-check the left-joined table `prepped_drug_offences` . I realised for the "buogkan" and "Loburi" rows, besides the 'total_cases' field, the rest of the fields were empty.

Seeing how suspiciously "buogkan" looks like a typo, I went to Google both "buogkan" and "Loburi" along with Thailand. Sure enough, the suggested words of "buogkan" and "Loburi" turned out to be **"Bueng Kan" and "Lop buri"** respectively.

Turned out the **Thailand Drug Offenses** **had the 2 erroneous province names**, while the shapefiles' province labels checked out.

I will have to do manual replacements for all affected fields in `thai_drug_offences_sf`

## Data Prep

Check misspelled province names before

```{r}
unique(thai_drug_offences_sf$province_en)[6]
unique(thai_drug_offences_sf$province_en)[30]
```

Rename them

```{r}
thai_drug_offences_sf$province_en[which(thai_drug_offences_sf$province_en == "Loburi")] <- 'Lop buri'
thai_drug_offences_sf$province_en[which(thai_drug_offences_sf$province_en == "buogkan")] <- 'Bueng Kan'
```

Check fix

```{r}
unique(thai_drug_offences_sf$province_en)[6]
unique(thai_drug_offences_sf$province_en)[30]
```

That should resolve the landmine.

## \[Again\] Relational Join

```{r}
thai_adm1_drug_offences_sf <- left_join(
  (
    thai_drug_offences_sf %>% 
      mutate(province_en = toupper(province_en)) %>%
      group_by(province_en) %>%
      summarize(total_cases = sum(no_cases), .groups = 'drop')),
  
  (
    thai_admin1_sf %>% 
      mutate(
        ADM1_EN = toupper(ADM1_EN),
        ADM1_PCODE = substr(ADM1_PCODE, 3, nchar(ADM1_PCODE)))),
  
  by = c('province_en'='ADM1_EN')) %>% 
  st_as_sf()

str(thai_adm1_drug_offences_sf)
```

Check Distribution of `no_cases`

-   across Thailand

```{r}
thai_17 <- thai_drug_offences_sf %>% filter(fiscal_year==2017)
thai_18 <- thai_drug_offences_sf %>% filter(fiscal_year==2018)
thai_19 <- thai_drug_offences_sf %>% filter(fiscal_year==2019)
thai_20 <- thai_drug_offences_sf %>% filter(fiscal_year==2020)
thai_21 <- thai_drug_offences_sf %>% filter(fiscal_year==2021)
thai_22 <- thai_drug_offences_sf %>% filter(fiscal_year==2022)
```

```{r}
plot(fitdist(thai_17$no_cases, 'norm'))
plot(fitdist(thai_18$no_cases, 'norm'))
plot(fitdist(thai_19$no_cases, 'norm'))
plot(fitdist(thai_20$no_cases, 'norm'))
plot(fitdist(thai_21$no_cases, 'norm'))
plot(fitdist(thai_22$no_cases, 'norm'))
```

-   Grouped by province

```{r}
# plot(thai_adm1_drug_offences_sf$total_cases)
plot(fitdist(thai_adm1_drug_offences_sf$total_cases, 'norm'))
```

> Indicates big tail

## Visualise

> [Visual styling](https://r-tmap.github.io/tmap-book/visual-variables.html)

```{r}
tmap_mode('plot')

tm_shape(thai_adm1_drug_offences_sf) +
  tm_polygons(
    col = "total_cases",
    palette = "YlOrRd",
    style = "quantile",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
    title = "Total Drug Cases"
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    auto.placement = TRUE,
    shadow = TRUE
  ) +
  tm_borders(lwd = 0.5) +  # Border thickness
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Offenses (2017-2022)",
    main.title.size = 1.1
  ) +
  tm_scale_bar() +         # Scale Bar
  tm_legend(position = c("right", "top")) # Legend Position
```

```{r}
# write_rds()
```

```{r}
# read_rds()
```

---
title: "Take-Home Exercise 2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level"
author: "William"
date: "September 23, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Background

Nothing for now.

# Terms

-   Thailand administrative level 0 (country): **admin0**,

-   1 (province): **admin1**

-   2 (district): **admin2**

-   3 (sub-district, tambon): **admin3**

For the purposes of this exercise I will be dealing with **admin1** only (province-level).

# Objectives

# R Packages used

-   sf

-   tidyverse

-   [**readxl**](https://readxl.tidyverse.org/): since both datasets are in xls/xlsx format

-   skimr

-   sfdep

-   tmap

-   fitdist: finding out distribution type to match to match tmap style

```{r}

pacman::p_load(sf,tidyverse,skimr,readxl,sfdep,tmap,fitdistrplus,sfdep)
```

# Data

::: panel-tabset
## \[.csv\] Thailand Drug Offenses 2017-2022

[**Source**](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022)

**Metadata**

-   fiscal_year: recorded year

-   types_of_drug_offenses: category of offense

-   no_cases: total records for combination of year, drug offense type and province

-   province_th: province name in thai (**drop**)

-   province_en

**Import**

```{r}
thai_drug_offences_sf <- read_csv('data/aspatial/thai_drug_offenses_2017_2022.csv')
```

```{r}

str(thai_drug_offences_sf)
```

```{r}

summ_table <- skim(thai_drug_offences_sf) %>% as.data.frame()
summ_table
```

> -   No missing data
>
> -   Date range is indeed 2017 to 2022
>
> -   16 types of drug offenses (check unique values)
>
> -   summary statistics of overall **`no_cases`** seem to indicate **right-skew**

```{r}

thai_no_case <- summ_table %>% filter(skim_variable == 'no_cases') %>% dplyr::select(c(10:16))
thai_no_case
```

> Might need to view by offense type to see offense-specific distributions

Identify the unique values for each categorical column

```{r}

unique(thai_drug_offences_sf$fiscal_year)
```

```{r}

offense_type <- unique(thai_drug_offences_sf$types_of_drug_offenses)
offense_type
```

**Cleaning**

Remove thai labels

```{r}
thai_drug_offences_sf <- thai_drug_offences_sf %>% dplyr::select(1,2,3,5)
```

## \[.shp\] Thailand - Subnational Admin. Boundaries

[**Source**](https://data.humdata.org/dataset/d24bdc45-eb4c-4e3d-8b16-44db02667c27/resource/d0c722ff-6939-4423-ac0d-6501830b1759/download/tha_adm_rtsd_itos_20210121_shp.zip)

**Import**

```{r}
thai_admin1_sf <- st_read(
  dsn = 'data/geospatial/tha_adm_rtsd_itos_20210121_shp/',
  layer ='tha_admbnda_adm1_rtsd_20220121')
```

```{r}

glimpse(thai_admin1_sf)
```

**Extracting Relevant Data**

```{r}
thai_admin1_sf <- thai_admin1_sf %>% 
    dplyr::select(1:3,5) %>% 
    mutate(
        ADM1_EN = toupper(ADM1_EN),
        ADM1_PCODE = substr(ADM1_PCODE, 3, nchar(ADM1_PCODE)))
thai_admin1_sf
```

```{r}

any(duplicated(thai_admin1_sf))
```
:::

## Aggregating by Province

### Relational Join

```{r}
set.seed(69)
```

```{r}
#| eval:  false
province_drug_offences <- thai_drug_offences_sf %>% 
  group_by(province_en) %>%
  summarize(total_cases = sum(no_cases), .groups = 'drop')
head(province_drug_offences)
```

```{r}
#| eval:  false
combined_prepped_drug_offences_ <- left_join(province_drug_offences, thai_admin1_sf,by = c('province_en'='ADM1_EN')) %>% st_as_sf()
glimpse(combined_prepped_drug_offences_)
```

```{r}
#| eval:  false
tmap_mode('plot')

tm_shape(combined_prepped_drug_offences_)+
  tm_polygons() +
  tm_fill(alpha = .5,col = combined_prepped_drug_offences_$total_cases)
  tm_text(combined_prepped_drug_offences_$province_en)
```

### Landmine

This is where I encountered the first landmine of sorts. The above code results in:

``` r
Error in `$<-`:
! Assigned data `as.numeric(...)` must be compatible with existing data.
✖ Existing data has 77 rows.
✖ Assigned data has 75 rows.
ℹ Only vectors of size 1 are recycled.
Caused by error in `vectbl_recycle_rhs_rows()`:
! Can't recycle input of size 75 to size 77.
```

So I went to re-check the left-joined table `prepped_drug_offences` . I realised for the "buogkan" and "Loburi" rows, besides the 'total_cases' field, the rest of the fields were empty.

Seeing how suspiciously "buogkan" looks like a typo, I went to Google both "buogkan" and "Loburi" along with Thailand. Sure enough, the suggested words of "buogkan" and "Loburi" turned out to be **"Bueng Kan" and "Lop buri"** respectively.

Turned out the **Thailand Drug Offenses** **had the 2 erroneous province names**, while the shapefiles' province labels checked out.

I will have to do manual replacements for all affected fields in `thai_drug_offences_sf`

### Fixing Mispelled Province Names

Check before

```{r}

unique(thai_drug_offences_sf$province_en)[6]
unique(thai_drug_offences_sf$province_en)[30]
```

Rename and Standardise Case

```{r}
thai_drug_offences_sf$province_en[which(thai_drug_offences_sf$province_en == "Loburi")] <- 'Lop buri'
thai_drug_offences_sf$province_en[which(thai_drug_offences_sf$province_en == "buogkan")] <- 'Bueng Kan'

thai_drug_offences_sf <- thai_drug_offences_sf %>% mutate(province_en = toupper(province_en))
```

Check fix

```{r}

unique(thai_drug_offences_sf$province_en)[6]
unique(thai_drug_offences_sf$province_en)[30]
```

That should resolve the landmine.

Separating suspected cases using `grepl()`

```{r}
# suspected
suspected_offenses_sf <- thai_drug_offences_sf %>% filter(grepl("suspects", types_of_drug_offenses))
```

```{r}
# actual
offenses_sf <- thai_drug_offences_sf %>% filter(!grepl("suspects", types_of_drug_offenses)) 
```

### \[Again\] Relational Join

```{r}
combined_offenses_sf <- left_join(
  (
    offenses_sf %>% 
      group_by(province_en) %>%
      summarize(total_cases = sum(no_cases), .groups = 'drop')),
  
    thai_admin1_sf,
  
  by = c('province_en'='ADM1_EN')) %>% 
  st_as_sf()

str(combined_offenses_sf)
```

```{r}
combined_suspected_offenses_sf <- left_join(
  (
    suspected_offenses_sf %>% 
      mutate(province_en = toupper(province_en)) %>%
      group_by(province_en) %>%
      summarize(total_cases = sum(no_cases), .groups = 'drop')),
  
  (
    thai_admin1_sf %>% 
      mutate(
        ADM1_EN = toupper(ADM1_EN),
        ADM1_PCODE = substr(ADM1_PCODE, 3, nchar(ADM1_PCODE)))),
  
  by = c('province_en'='ADM1_EN')) %>% 
  st_as_sf()

str(combined_suspected_offenses_sf)
```

### Distribution of `no_cases`

::: panel-tabset
#### Big Picture

Overall Visualisations using qtm() and tmap_arrange()

```{r}

basemap <- tm_shape(combined_offenses_sf) + tm_polygons() + tm_text("ADM1_PCODE",size = 0.4)
offenses <- qtm(combined_offenses_sf,"total_cases")
suspects <- qtm(combined_suspected_offenses_sf,"total_cases")
tmap_arrange(suspects, basemap, offenses, asp=1, ncol=3)
```

Overall Distributions

```{r}

par(mfrow=c(1,2))
plot(offenses_sf$no_cases)
plot(suspected_offenses_sf$no_cases)
```

```{r}

plot(fitdist(offenses_sf$no_cases, 'norm'))
```

```{r}

plot(fitdist(suspected_offenses_sf$no_cases, 'norm'))
```

#### Aggregated Cases by Province across 2017-2022

```{r}

par(mfrow=c(1,2))
plot(combined_offenses_sf$total_cases)
plot(combined_suspected_offenses_sf$total_cases)
```

```{r}

plot(fitdist(combined_offenses_sf$total_cases, 'norm'))
```

```{r}

plot(fitdist(combined_suspected_offenses_sf$total_cases, 'norm'))
```
:::

#### 

> **Conclusions: Right Skewed, heavy right tail, outliers present; Actual and Suspected cases follow the similar distribution**
>
> Hence, to visualise the continuous variable `total_cases` , I am goin to experiment with:
>
> -   `quantile`
>
> -   `log10`
>
> -   `order`
>
> <!-- -->
>
> -   `headtails`
>
> -   `log10_pretty`
>
> -   `cont`

### Visualise actual cases

> [Visual styling](https://r-tmap.github.io/tmap-book/visual-variables.html)

```{r}
tmap_mode('plot')
```

::: panel-tabset
#### style = "quantile"

<details>

<summary>Reveal Code</summary>

```{r}

offenses_qt <- tm_shape(combined_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "quantile",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Offenses (2017-2022)",
    main.title.size = 0.666
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

suspected_qt <- tm_shape(combined_suspected_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "quantile",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Suspected Offenses (2017-2022)",
    main.title.size = 0.666
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

tmap_arrange(offenses_qt, suspected_qt, asp=1, ncol=2)
```

</details>

#### style = "log10"

<details>

<summary>Reveal Code</summary>

```{r}

offenses_log <- tm_shape(combined_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "log10",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

suspected_log <- tm_shape(combined_suspected_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "log10",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Suspected Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

tmap_arrange(offenses_log, suspected_log, asp=1, ncol=2)
```

</details>

#### style = "order"

<details>

<summary>Reveal Code</summary>

```{r}

offenses_odr <- tm_shape(combined_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "order",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

suspected_odr <- tm_shape(combined_suspected_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "order",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Suspected Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

tmap_arrange(offenses_odr, suspected_odr, asp=1, ncol=2)
```

</details>

#### style = 'headtails'

<details>

<summary>Reveal Code</summary>

```{r}

offenses_ht <- tm_shape(combined_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "headtails",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

suspected_ht <- tm_shape(combined_suspected_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "headtails",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Suspected Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

tmap_arrange(offenses_ht, suspected_ht, asp=1, ncol=2)
```

</details>

#### style = 'log10_pretty'

<details>

<summary>Reveal Code</summary>

```{r}

offenses_lgprty <- tm_shape(combined_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "log10_pretty",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

suspected_lgprty <- tm_shape(combined_suspected_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "log10_pretty",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Suspected Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

tmap_arrange(offenses_lgprty, suspected_lgprty, asp=1, ncol=2)
```

</details>

#### style = 'cont'

<details>

<summary>Reveal Code</summary>

```{r}

offenses_cont <- tm_shape(combined_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "cont",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

suspected_cont <- tm_shape(combined_suspected_offenses_sf) +
  tm_fill(
    col = "total_cases",
    palette = "-RdYlGn",
    style = "cont",    # Use quantiles to emphasize hotspots
    border.col = "white",
    lwd = 0.666,             # Adjust line width of province borders
  ) +
  tm_text(
    "ADM1_PCODE",    # Province NUMERIC code
    size = "total_cases",  # proportional symbols
    col = "black",
    # auto.placement = TRUE,
    shadow = TRUE
  ) +
  
  tm_borders(lwd = 0.666) +  # Border thickness
  tm_compass(type="8star", size = 1.666) +
  tm_scale_bar(width = 0.156, position = c("right", "bottom"))  +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  
  tm_layout(
    legend.outside = TRUE, 
    frame = FALSE,
    main.title = "Thailand Drug Suspected Offenses (2017-2022)",
    main.title.size = 1.0
  ) +
  tm_legend(position = c("right", "bottom")) # Legend Position

tmap_arrange(offenses_cont, suspected_cont, asp=1, ncol=2)
```

</details>
:::

> `'log10'` style had the best visualisation of the distribution drug offenses in terms of **contrast** between 'hot' and 'cold' spots and overall aesthetics.

## Aggregating by Time & Province (Same as on Prof's site)

### Prepare data

#### Relational Join

```{r}

offences_sf_joined <- left_join(
    (offenses_sf  %>% group_by(fiscal_year)),
    thai_admin1_sf,
    by = c('province_en'='ADM1_EN')) %>%
    st_as_sf()

suspected_offenses_sf_joined <- left_join(
    (suspected_offenses_sf %>% group_by(fiscal_year)),
    thai_admin1_sf,
    by = c('province_en'='ADM1_EN')) %>%
    st_as_sf()
```

#### Modify

```{r}

offences_sf_by_province_year <- offences_sf_joined %>% 
    group_by(fiscal_year,province_en,ADM1_PCODE, geometry) %>%
    summarise(total_cases = sum(no_cases, na.rm = TRUE), .groups = "drop")

suspected_offences_sf_by_province_year <- suspected_offenses_sf_joined %>% 
    group_by(fiscal_year,province_en,ADM1_PCODE, geometry) %>%
    summarise(total_cases = sum(no_cases, na.rm = TRUE), .groups = "drop")
```

> `.groups = "drop"` avoids creating unnecessary group structure

### Check

```{r}

glimpse(offences_sf_by_province_year)
```

```{r}

glimpse(suspected_offences_sf_by_province_year)
```

### Visualise using `tmap`

As previously plotted, the distribution of drug offenses in Thailand (across time periods and within province areas) is characteristic of a **right-skewed distribution** or **heavy-tailed** distribution. Hence, a **logarithmic scale** or a **Jenks Natural Breaks** method would be suitable to handle the skewness and emphasize meaningful breaks in the data.

#### Log

<details>

<summary>Reveal Code</summary>

```{r}

tm_shape(offences_sf_by_province_year) +
  tm_fill(
    col = "total_cases",
    palette = "Blues",       # Use a blue color palette similar to the image
    style = "log10",      # Adjust based on the distribution of your data
    n = 5,                   # Define number of bins for colors
    title = "Drug use cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", nrow = 2, ncol = 3) +  # Facet by year, 2 rows and 3 columns
  tm_layout(
    title = "Drug use cases by year",               # Title for the entire plot
    legend.position = c("right", "bottom"),         # Position the legend on the right
    panel.label.size = 1.333,                         # Adjust the size of the year labels
    legend.title.size = .666,                        # Customize the size of the legend title
    legend.text.size = .666                          # Customize the size of the legend text
  )
```

```{r}

tm_shape(suspected_offences_sf_by_province_year) +
  tm_fill(
    col = "total_cases",
    palette = "Blues",       # Use a blue color palette similar to the image
    style = "log10",      # Adjust based on the distribution of your data
    n = 5,                   # Define number of bins for colors
    title = "Suspected Drug uses"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", nrow = 2, ncol = 3) +  # Facet by year, 2 rows and 3 columns
  tm_layout(
    title = "Suspected Drug uses by year",               # Title for the entire plot
    legend.position = c("right", "bottom"),         # Position the legend on the right
    panel.label.size = 1.333,                         # Adjust the size of the year labels
    legend.title.size = .666,                        # Customize the size of the legend title
    legend.text.size = .666                          # Customize the size of the legend text
  )
```

</details>

#### Jenks

<details>

<summary>Reveal Code</summary>

```{r}

# Create the faceted map
tm_shape(offences_sf_by_province_year) +
  tm_fill(
    col = "total_cases",
    palette = "Blues",       # Use a blue color palette similar to the image
    style = "jenks",      # Adjust based on the distribution of your data
    n = 5,                   # Define number of bins for colors
    title = "Drug use cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", nrow = 2, ncol = 3) +  # Facet by year, 2 rows and 3 columns
  tm_layout(
    title = "Drug use cases by year",               # Title for the entire plot
    legend.position = c("right", "bottom"),         # Position the legend on the right
    panel.label.size = 1.333,                         # Adjust the size of the year labels
    legend.title.size = .666,                        # Customize the size of the legend title
    legend.text.size = .666                          # Customize the size of the legend text
  )

tm_shape(suspected_offences_sf_by_province_year) +
  tm_fill(
    col = "total_cases",
    palette = "Blues",       # Use a blue color palette similar to the image
    style = "jenks",      # Adjust based on the distribution of your data
    n = 5,                   # Define number of bins for colors
    title = "Suspected Drug uses"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", nrow = 2, ncol = 3) +  # Facet by year, 2 rows and 3 columns
  tm_layout(
    title = "Suspected Drug uses by year",               # Title for the entire plot
    legend.position = c("right", "bottom"),         # Position the legend on the right
    panel.label.size = 1.333,                         # Adjust the size of the year labels
    legend.title.size = .666,                        # Customize the size of the legend title
    legend.text.size = .666                          # Customize the size of the legend text
  )
```

</details>

> Jenks has better contrast between hot and cold spots overall compared to the logarithmic method

# Visualising Drug Abuse Indicators

### Prepare layers

```{r}
#| eval:  false
drug_use    <- offenses_sf %>% filter(types_of_drug_offenses=='drug_use_cases')
possession  <- offenses_sf %>% filter(types_of_drug_offenses=='possession_cases')
possession_with_intent_to_distribute <- offenses_sf %>% filter(types_of_drug_offenses=='possession_with_intent_to_distribute_cases')
trafficking <- offenses_sf %>% filter(types_of_drug_offenses=='trafficking_cases')
production  <- offenses_sf %>% filter(types_of_drug_offenses=='production_cases')
import      <- offenses_sf %>% filter(types_of_drug_offenses=='import_cases')
export      <- offenses_sf %>% filter(types_of_drug_offenses=='export_cases')
conspiracy  <- offenses_sf %>% filter(types_of_drug_offenses=='conspiracy_cases')
```

```{r}
#| eval:  false
drug_use    <- left_join(drug_use, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
possession  <- left_join(possession, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
possession_with_intent_to_distribute <- left_join(possession_with_intent_to_distribute, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
trafficking <- left_join(trafficking, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
production  <- left_join(production, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
import      <- left_join(import, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
export      <- left_join(export, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
conspiracy  <- left_join(conspiracy, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
```

```{r}
# suspected_drug_use    <- suspected_offences_sf %>% filter(types_of_drug_offenses=='suspects_in_drug_use_cases')
# suspected_possession  <- suspected_offences_sf %>% filter(types_of_drug_offenses=='suspects_in_possession_cases')
# suspected_possession_with_intent_to_distribute <- suspected_offences_sf %>% filter(types_of_drug_offenses=='suspects_in_possession_with_intent_to_distribute_cases')
# suspected_trafficking <- suspected_offences_sf %>% filter(types_of_drug_offenses=='suspects_in_trafficking_cases')
# suspected_production  <- suspected_offences_sf %>% filter(types_of_drug_offenses=='suspects_in_production_cases')
# suspected_import      <- suspected_offences_sf %>% filter(types_of_drug_offenses=='suspects_in_import_cases')
# suspected_export      <- suspected_offences_sf %>% filter(types_of_drug_offenses=='suspects_in_export_cases')
# suspected_conspiracy  <- suspected_offences_sf %>% filter(types_of_drug_offenses=='suspects_in_conspiracy_cases')
```

```{r}
# suspected_drug_use    <- left_join(suspected_drug_use, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
# suspected_possession  <- left_join(suspected_possession, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
# suspected_possession_with_intent_to_distribute <- left_join(suspected_possession_with_intent_to_distribute, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
# suspected_trafficking <- left_join(suspected_trafficking, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
# suspected_production  <- left_join(suspected_production, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
# suspected_import      <- left_join(suspected_import, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
# suspected_export      <- left_join(suspected_export, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
# suspected_conspiracy  <- left_join(suspected_conspiracy, thai_admin1_sf, by = c('province_en'='ADM1_EN'))
```

### RDS Checkpoint

```{r}
#| eval:  false
write_rds(drug_use, 'data/rds/drug_use.rds')
write_rds(possession, 'data/rds/possession.rds')
write_rds(possession_with_intent_to_distribute, 'data/rds/possession_with_intent_to_distribute.rds')
write_rds(trafficking, 'data/rds/trafficking.rds')
write_rds(production, 'data/rds/production.rds')
write_rds(import, 'data/rds/import.rds')
write_rds(export, 'data/rds/export.rds')
write_rds(conspiracy, 'data/rds/conspiracy.rds')
```

```{r}
# write_rds(suspected_drug_use, 'data/rds/suspected_drug_use.rds')
# write_rds(suspected_possession, 'data/rds/suspected_possession.rds')
# write_rds(suspected_possession_with_intent_to_distribute, 'data/rds/suspected_possession_with_intent_to_distribute.rds')
# write_rds(suspected_trafficking, 'data/rds/suspected_trafficking.rds')
# write_rds(suspected_production, 'data/rds/suspected_production.rds')
# write_rds(suspected_import, 'data/rds/suspected_import.rds')
# write_rds(suspected_export, 'data/rds/suspected_export.rds')
# write_rds(suspected_conspiracy, 'data/rds/suspected_conspiracy.rds')
```

```{r}

drug_use =    read_rds('data/rds/drug_use.rds') %>% st_as_sf()
possession =  read_rds('data/rds/possession.rds') %>% st_as_sf()
possession_with_intent_to_distribute = read_rds('data/rds/possession_with_intent_to_distribute.rds') %>% st_as_sf()
trafficking = read_rds('data/rds/trafficking.rds') %>% st_as_sf()
production =  read_rds('data/rds/production.rds') %>% st_as_sf()
import =      read_rds('data/rds/import.rds') %>% st_as_sf()
export =      read_rds('data/rds/export.rds') %>% st_as_sf()
conspiracy =  read_rds('data/rds/conspiracy.rds') %>% st_as_sf()
```

```{r}
# suspected_drug_use =    read_rds('data/rds/suspected_drug_use.rds')
# suspected_possession =  read_rds('data/rds/suspected_possession.rds')
# suspected_possession_with_intent_to_distribute = read_rds('data/rds/suspected_possession_with_intent_to_distribute.rds')
# suspected_trafficking = read_rds('data/rds/suspected_trafficking.rds')
# suspected_production =  read_rds('data/rds/suspected_production.rds')
# suspected_import =      read_rds('data/rds/suspected_import.rds')
# suspected_export =      read_rds('data/rds/suspected_export.rds')
# suspected_conspiracy =  read_rds('data/rds/suspected_conspiracy.rds')
```

### Visualise

::: panel-tabset
#### drug use

```{r}

range(drug_use$no_cases)
```

> -   Significant spread: quantile or log10 to prevent extreme outlier/values from overshadowing smaller ones
>
> -   yellow-orange-red sequential gradient to highlight hotspots

```{r}

tm_shape(drug_use) + 
  tm_fill(
    col = "no_cases",
    palette = "YlOrRd",
    style = "quantile",
    title = "Drug Use Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "Drug Use Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

```{r}

tm_shape(drug_use) + 
  tm_fill(
    col = "no_cases",
    palette = "YlOrRd",
    style = "log10",
    title = "Drug Use Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "Drug Use Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

> Turns out log10 does not produce a well-contrasted chloropleth map

#### possession

```{r}

range(possession$no_cases)
```

> Same settings, same rationale as `drug_use`

```{r}

tm_shape(possession) + 
  tm_fill(
    col = "no_cases",
    palette = "YlOrRd",
    style = "quantile",
    title = "Possession Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "Possession Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

```{r}

tm_shape(possession) + 
  tm_fill(
    col = "no_cases",
    palette = "YlOrRd",
    style = "log10",
    title = "Possession Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "Possession by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

#### possession with intent to distribute

```{r}

range(possession_with_intent_to_distribute$no_cases)
```

> Smaller range compared to `drug_use` and `possession`, so `quantile` can provide a good balance without compressing the data into a narrow visual range, possibly `jenks` too?

```{r}

tm_shape(possession_with_intent_to_distribute) + 
  tm_fill(
    col = "no_cases",
    palette = "Purples",
    style = "quantile",
    title = "possession_with_intent_to_distribute Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "possession_with_intent_to_distribute Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

```{r}

tm_shape(possession_with_intent_to_distribute) + 
  tm_fill(
    col = "no_cases",
    palette = "Purples",
    style = "jenks",
    title = "possession_with_intent_to_distribute Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 2)
  tm_layout(
    title = "possession_with_intent_to_distribute Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

#### trafficking

```{r}

range(trafficking$no_cases)
```

> Much smaller and more clustered range thus far. Using `jenks` should help discern significant differences without skewness.

```{r}
tm_shape(trafficking) + 
  tm_fill(
    col = "no_cases",
    palette = "Purples",
    style = "jenks",
    title = "trafficking Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "trafficking Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

```{r}

tm_shape(trafficking) + 
  tm_fill(
    col = "no_cases",
    palette = "Purples",
    style = "quantile",
    title = "trafficking Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "trafficking Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

#### production

```{r}

range(production$no_cases)
```

> Same settings and rationale as trafficking

```{r}

tm_shape(production) + 
  tm_fill(
    col = "no_cases",
    palette = "Purples",
    style = "jenks",
    title = "production Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "production Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

```{r}

tm_shape(production) + 
  tm_fill(
    col = "no_cases",
    palette = "Purples",
    style = "quantile",
    title = "production Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "production Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

#### import

```{r}

range(import$no_cases)
```

> Small range: pretty (default) should suffice since there aren't many useful data points anyways

```{r}

tm_shape(import) + 
  tm_fill(
    col = "no_cases",
    palette = "Purples",
    style = "pretty",
    n = 4,
    title = "import Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "import Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

#### export

```{r}

range(export$no_cases)
```

> Same settings and rationale as import

```{r}

tm_shape(export) + 
  tm_fill(
    col = "no_cases",
    palette = "Purples",
    style = "pretty",
    n = 2,
    title = "export Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "export Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```

#### conspiracy

```{r}

range(conspiracy$no_cases)
```

> Same settings and rationale as import

```{r}

tm_shape(conspiracy) + 
  tm_fill(
    col = "no_cases",
    palette = "Purples",
    style = "pretty",
    n = 3,
    title = "conspiracy Cases"
  ) +
  tm_borders() +
  tm_facets(by = "fiscal_year", ncol = 3)
  tm_layout(
    title = "conspiracy Cases by Province (2017-2022)",
    legend.outside = TRUE,
    frame = FALSE
  )
```
:::

# Global Spatial Autocorrelation Analysis

Normally, spatial weights can be computed using functions like `poly2nb()` (for polygons) or `knn2nb()` (for point data), but here we need to account for the time dimension as well.

However I will perform it normally as discussed in class lectures and exercises.

### Global Moran’s I with permutation testing

::: panel-tabset
```{r}
set.seed(69)
yr <- unique(drug_use$fiscal_year)
```

Compute weight matrix

```{r}

wm_data <- drug_use %>% filter(fiscal_year==2017)
# wm_q <- wm_data %>% mutate(
#     nb=st_contiguity(wm_data$geometry),
#     wt=st_weights(nb, style='W'),
#     .before=1)
```

The above code outputs this error message:

```         
Error in `stopifnot()`:
ℹ In argument: `wt = st_weights(nb, style = "W")`.
Caused by error in `nb2listw()`:
! Empty neighbour sets found
Backtrace:
  1. wm_data %>% ...
 13. sfdep::st_weights(nb, style = "W")
 14. spdep::nb2listw(...)
 15. base::stop("Empty neighbour sets found")
```

Lets isolate the error:

```{r}
nb <- st_contiguity(wm_data$geometry)
```

> row 68 corresponds to Phuket

According to Google Maps,

![](images/clipboard-2790575953.png)

Phuket seems to be physically closest to Phang Nga, but since its technically separated by a road bridge, it won't be 'recognised' as a neigbour by `st_contiguity` . I will be modifying Phuket's neigbour list to include Phang Nga:

```{r}
nb[[68]] <- as.integer(67) # should resolve error
```

```{r}
wm_data <- drug_use %>% filter(fiscal_year==2017)
wm_q <- wm_data %>% mutate(
    nb=nb,
    wt=st_weights(nb, style='W'),
    .before=1) %>% dplyr::select(1,2)
```

#### drug_use

```{r}
drug_use_cases <- drug_use %>% dplyr::select(1,3)

par(mfrow=c(2,3))
for (year in yr){
  mi_perm <- global_moran_perm(
    drug_use_cases %>% filter(fiscal_year==year) %>% dplyr::pull(2),
    nb,
    wm_q$wt,
    nsim = 99)
  hist(mi_perm$res, freq=TRUE, breaks=20, xlab=paste("Simulated Moran's I"), main=paste("Histogram for", year))
  abline(v=0,col="red")
}
```

#### possession

```{r}
possession_cases <- possession %>% dplyr::select(1,3)

par(mfrow=c(2,3))
for (year in yr){
  mi_perm <- global_moran_perm(
    possession_cases %>% filter(fiscal_year==year) %>% dplyr::pull(2),
    nb,
    wm_q$wt,
    nsim = 99)
  hist(mi_perm$res, freq=TRUE, breaks=20, xlab=paste("Simulated Moran's I"), main=paste("Histogram for", year))
  abline(v=0,col="red")
}
```

#### possession_with_intent_to_distribute

```{r}
possession_with_intent_to_distribute_cases <- possession_with_intent_to_distribute %>% dplyr::select(1,3)

par(mfrow=c(2,3))
for (year in yr){
  mi_perm <- global_moran_perm(
    possession_with_intent_to_distribute_cases %>% filter(fiscal_year==year) %>% dplyr::pull(2),
    nb,
    wm_q$wt,
    nsim = 99)
  hist(mi_perm$res, freq=TRUE, breaks=20, xlab=paste("Simulated Moran's I"), main=paste("Histogram for", year))
  abline(v=0,col="red")
}
```

#### trafficking

```{r}
trafficking_cases <- trafficking %>% dplyr::select(1,3)

par(mfrow=c(2,3))
for (year in yr){
  mi_perm <- global_moran_perm(
    trafficking_cases %>% filter(fiscal_year==year) %>% dplyr::pull(2),
    nb,
    wm_q$wt,
    nsim = 99)
  hist(mi_perm$res, freq=TRUE, breaks=20, xlab=paste("Simulated Moran's I"), main=paste("Histogram for", year))
  abline(v=0,col="red")
}
```

#### production

```{r}
production_cases <- production %>% dplyr::select(1,3)

par(mfrow=c(2,3))
for (year in yr){
  mi_perm <- global_moran_perm(
    production_cases %>% filter(fiscal_year==year) %>% dplyr::pull(2),
    nb,
    wm_q$wt,
    nsim = 99)
  hist(mi_perm$res, freq=TRUE, breaks=20, xlab=paste("Simulated Moran's I"), main=paste("Histogram for", year))
  abline(v=0,col="red")
}
```

#### import

```{r}
import_cases <- import %>% dplyr::select(1,3)

par(mfrow=c(2,3))
for (year in yr){
  mi_perm <- global_moran_perm(
    import_cases %>% filter(fiscal_year==year) %>% dplyr::pull(2),
    nb,
    wm_q$wt,
    nsim = 99)
  hist(mi_perm$res, freq=TRUE, breaks=20, xlab=paste("Simulated Moran's I"), main=paste("Histogram for", year))
  abline(v=0,col="red")
}
```

#### export

```{r}
export_cases <- export %>% dplyr::select(1,3)

par(mfrow=c(2,3))
for (year in yr){
  mi_perm <- global_moran_perm(
    export_cases %>% filter(fiscal_year==year) %>% dplyr::pull(2),
    nb,
    wm_q$wt,
    nsim = 99)
  hist(mi_perm$res, freq=TRUE, breaks=20, xlab=paste("Simulated Moran's I"), main=paste("Histogram for", year))
  abline(v=0,col="red")
}
```

#### conspiracy

```{r}
conspiracy_cases <- conspiracy %>% dplyr::select(1,3)

par(mfrow=c(2,3))
for (year in yr){
  cases = conspiracy_cases %>% filter(fiscal_year==year) %>% dplyr::pull(2)
  mi_perm <- global_moran_perm(
    # x = integer(nrow(wm_q)),
    cases,
    nb,
    wm_q$wt,
    nsim = 99)
  
  # debugging
  # print(year)
  # print(cases)

  # checks if the year's vector has no_case = 0
  if (sum(cases)==0) {
    message(paste("Skipping year", year, "due to empty data (0 cases)"))
    next  # continue to next iteration
  }

  hist(mi_perm$res, freq=TRUE, breaks=20, xlab=paste("Simulated Moran's I"), main=paste("Histogram for", year))
  abline(v=0,col="red")
}
```
:::

## Geary's C

## **Spatial Correlogram**

# **Local Indicators of Spatial Association (LISA)**

## Weights

## Moran's I

## LISA Cluster Map

## Hot Spot and Cold Spot Area Analysis (Getis and Ord’s G-Statistics)

#### Weights

#### **Computing Gi statistics**

#### **Mapping Gi values**

# \[FUTURE\] Comparing with Population Data

\<TODO\>

---
title: "ICE 4: Spatio-Temporal Point Patterns Analysis"
author: "William"
date: "September 8, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Background

-   Spatio-temporal point process (**stpp**) is a random collection of points, where each point represents the time and location of an event

-   for geographically and temporally indexed data

-   Context:

    -   A real world forest fire events in Kepulauan Bangka Belitung, Indonesia from 1st January 2023 to 31st December 2023

# Objectives

-   are the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?

-   if the answer is NO, where and when the observed forest fire locations tend to cluster?

# Notes:

-   space-time KDE (**STKDE**) - bullet point 4-5 of THE1 where data is **across-time**, rather than the use of cross-sectional data in KDE (single-point in time) previously

# Code:

### **Load packages**

-   NOTE THAT `sparr` HAS AN ANIMATING FEATURE TO SEE HOW ST PATTERNS DIFFUSE

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse, sparr)
```

### **Import and Prepare Study Area**

#### Import and remove 'z'

```{r}
kbb <- st_read(dsn = 'data/rawdata/', layer = 'Kepulauan_Bangka_Belitung') %>% 
  st_transform(crs = 32748)
```

> -   "desolve" 'z' boundaries before preparing study area
>
> -   kbb contains a new geometry type: polygonz, denoting as height — **drop 'z'** otherwise will incur an error when converting to ppp object class

Revised code chunk to account for the above

```{r}
kbb_sf <- st_read(dsn = 'data/rawdata/', layer = 'Kepulauan_Bangka_Belitung') %>% 
  # addition
  st_union() %>% 
  st_zm(drop = TRUE, what = 'ZM') %>% 
  # --------
  st_transform(crs = 32748)
```

#### **Convert to OWIN**

```{r}
kbb_owin <- as.owin(kbb_sf)
kbb_owin
```

#### Confirm class of output

```{r}
class(kbb_owin)
```

If using kbb with 'z', the following **error** will occur:

```{r}
# kbb_owin_error <- as.owin(kbb)

# error:
# Error in owinInternalPoly(xrange, yrange, ..., poly = poly, unitname = unitname) : 
#   poly must be either a list(x,y) or a list of list(x,y)
```

### **Import and Prepare Forest Data**

```{r}
fire_sf <- read_csv('data/rawdata/forestfires.csv') %>% 
  st_as_sf(coords = c('longitude', 'latitude'), crs = 4326) %>% # combines columns to convert into geospatial data
                                                                # order must be long then lat (follows x,y)
  st_transform(crs = 32748)                                     # converts to UTM 48
```

> -   Note that 'longitude' and 'latitude' combined to form 'geometry' in UTM48 from WGS84
>
> -   If `st_as_sf()` and `st_transform` not used:

```{r}
fire <- read_csv('data/rawdata/forestfires.csv')
# will output an ASPATIAL data file
```

Because ppp object only accepts numerical or characters as mark, the code chunk below is used to convert data type of acq_date to **numeric**

```{r}
fire_sf <- fire_sf %>%
  mutate('DayofYear' = yday(acq_date)) %>% 
  mutate('Month_num' = month(acq_date)) %>% 
  mutate('Month_fac' = month(
    acq_date, 
    label = TRUE, # display the month as a character string e.g. "January."; FALSE will display the month as a number.
    abbr = FALSE # display the month as a character string label, e.g. "January"; TRUE displays abbr version of the label, like "Jan"
    ))
```

```{r}
fire_sf
```

# Fire points Visualisation

::: panel-tabset
## Task

Prepare a point symbol map showing the distribution of fire points

## Code

```{r}
tm_shape(kbb_sf) + tm_polygons() + # plot polygon overview layer first
  tm_shape(fire_sf) + tm_dots()    # plot dot layer next (otherwise dots cant be seen)
```
:::

::: panel-tabset
## Task

Using steps learned in Hands-on Exercise 2, prepare a point symbol map showing the monthly geographic distribution of forest fires in 2023.

## Code

```{r}
tm_shape(kbb_sf) + tm_polygons() + 
  tm_shape(fire_sf) + tm_dots(size = 0.1) +
tm_facets(
  by= 'Month_fac', # data variable name by which the data is split
  free.coords = FALSE, # should each map has its own coordinate ranges? if TRUE the map visual will look awkward (different zooms)
  drop.units = TRUE) # should non-selected spatial units be dropped?
```
:::

# Computing Monthly STKDE

### Extract monthly forest fires

Remove unwanted fields from `fire_sf` dataframe because `as.ppp()` only needs the mark field and geometry field from the input sf dataframe

```{r}
fire_month <- fire_sf %>% 
  select(Month_num)
```

### Create `ppp` object

```{r}
fire_month_ppp <- as.ppp(fire_month)
fire_month_ppp
```

### Verify output

```{r}
summary(fire_month_ppp)
```

```{r}
sum(duplicated(fire_month_ppp))
```

> Duplicates are highly unlikely because the likelihood of a fire being detected at the exact location from outer-space sats is very low

### Include owin object

```{r}
fire_month_owin <- fire_month_ppp[kbb_owin]
summary(fire_month_owin)
```

### Computing STKDE

```{r}
library(sparr)
st_kde <- spattemp.density(fire_month_owin)
summary(st_kde)

# Error in spattemp.density(fire_month_owin) : 
#   could not find function "spattemp.density"
```

### **Plotting STKDE object**

```{r}
#| fig-width: 12
#| fig-height: 10
tims <- c(7,8,9,10,11,12)
par(mfcol=c(2,3))

for (i in tims){
  plot(st_kde, i,
    override.par=FALSE,
    fix.range=TRUE,
    main=paste("Monthly KDE",i)
  )
}
```

# Computing STKDE by Year

### Creating ppp object

```{r}
head(fire_sf)
```

```{r}
fire_yday_ppp <- fire_sf %>% 
  select(DayofYear) %>% 
  as.ppp()
```

### Include owin object

```{r}
fire_yday_owin <- fire_yday_ppp[kbb_owin]
summary(fire_yday_owin)
```

### Compute STKDE 

```{r}
kde_yday <- spattemp.density(
  fire_yday_owin
)

summary(kde_yday)
```

### **Plotting STKDE object**

```{r}
# plot(kde_yday)
```

# **Computing STKDE by Day of Year: Improved method**

### Determine both the spatial bandwidth and the scalar temporal bandwidth using `BOOT.spattemp()`

```{r}
set.seed(1234) # for reproducible result
BOOT.spattemp(fire_yday_owin)
# TLDR:
# allows computing of kernel density over time and space together
# allows the kernel bandwidth to vary in both space and time
# computes densities across three dimensions (two spatial, one temporal), which is essential for realistic spatio-temporal modeling
# flexibility in the choice of kernel
```

### Computing STKDE object

```{r}
kde_yday <- spattemp.density(
  fire_yday_owin,
  h = 9000, # radius around each data point over which influence is spread: bigger BW, more smoothin, less sens to small-scale variation; ROUNDED DOWN b/c balanced between noise and smoother aesthetics
  lambda = 19) # same concept as spatial BW; marginal change + smooth out short-term fluctuations or noise and emphasize longer-term trends
summary(kde_yday)
```

### Plotting STKDE object

```{r}
# plot(kde_yday)
```

# **Readings**

Jonatan A. González, et. al. (2016) [“Spatio-temporal point process statistics: A review”](https://www.sciencedirect.com/science/article/pii/S2211675316301130?ref=pdf_download&fr=RR-2&rr=8bfff858af196002), *Spatial Statistics*, Volume 18, Part B, November 2016, Pages 505-544.

Alexander Hohl et. al.[“Spatiotemporal Point Pattern Analysis Using Ripley’s K”](https://pages.charlotte.edu/eric-delmelle/wp-content/uploads/sites/150/2019/09/Spatiotemporal-Point-Pattern-Analysis-Using-Ripleys-K-Function.pdf) in **Geospatial Data Science Techniques and Applications**.

Tonini, Marj et. al. (2017[) “Evolution of forest fires in Portugal: from spatio-temporal point events to smoothed density maps”](https://link-springer-com.libproxy.smu.edu.sg/article/10.1007/s11069-016-2637-x), *Natural hazards* (Dordrecht), 2017-02, Vol.85 (3), p.1489-1510. Available at SMU eJournal.

Juan, P et. al. (2012)[“Pinpointing spatio-temporal interactions in wildfire patterns”](https://link-springer-com.libproxy.smu.edu.sg/article/10.1007/s00477-012-0568-y), *Stochastic environmental research and risk assessment*, 2012-12, Vol.26 (8), p.1131-1150. Available at SMU eJournal.

# **About R**

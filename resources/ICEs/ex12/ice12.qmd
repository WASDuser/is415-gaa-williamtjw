---
title: "ICE 12: Predictive Modelling"
author: "William"
date: "November 11, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  cache: true
format: 
  html:
    code-tools: true
    code-link: true
---

# Load R packages

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, yardstick, tidyverse, knitr, kableExtra, spatialRF)
```

::: {.callout-note appearance="minimal"}
## ML packages

**SpatialML**: perform ML techniques, specifically random forest

**rsample**: generic resampling package

**yardstick**: generic model assessment (tidy model)
:::

# Data

### Import

```{r}
mdata <- read_rds('data/rds/mdata.rds')
```

### Data Sampling

Calibrating predictive models are computationally intensive, especially random forest method. For quick prototyping, a 10% sample will be selected at random from data using `sample_n()`.

```{r}
# Random sampling to reduce file size
set.seed(69)
HDB_sample <- mdata %>% sample_n(1500)
```

::: {.callout-tip appearance="minimal"}
**Shiny App**

Can expose the `sample_n()` to allow user to choose, but only after optimising the model's memory usage.
:::

### Check for overlapping point features

```{r}
overlapping_points <- HDB_sample %>% 
    mutate(overlap = length(st_equals(., .)) > 1)
summary(overlapping_points$overlap)
```

::: callout-important
When using GWmodel to do predictive modelling, remember to handle overlapping points.
:::

```{r}
# move overlapping points by 5 metres
HDB_sample <- HDB_sample %>% st_jitter(amount = 5)
```

### Train-test split

```{r}
set.seed(69)
resale_split <- initial_split(
    HDB_sample,
    prop = 6.67/10)

train_data <- training(resale_split)
test_data <- testing(resale_split)
```

```{r}
write_rds(train_data, 'data/rds/train_data.rds')
write_rds(test_data, 'data/rds/test_data.rds')
```

```{r}
train_data <- read_rds('data/rds/train_data.rds')
test_data <- read_rds('data/rds/test_data.rds')
```

### Check for multi-collinearity

```{r}
#| fig-column: screen-inset
mdata_nogeo <- mdata %>% st_drop_geometry()
ggstatsplot::ggcorrmat(mdata_nogeo[,2:17])
```

# Creating Predictive Models

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
olsrr::ols_regress(price_mlr)
```

### Calibrating bandwidth

```{r}
gwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=train_data,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
gwr_bw_train_ad
```

### Calibrating Model

```{r}
gwr_ad <- gwr.basic(
    formula = resale_price ~ floor_area_sqm +
        storey_order + remaining_lease_mths +
        PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
        PROX_MRT + PROX_PARK + PROX_MALL + 
        PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
        WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
        WITHIN_1KM_PRISCH,
    data = train_data,
    bw=20,
    kernel = 'gaussian',
    adaptive = TRUE,
    longlat = FALSE)

```

::: {.callout-tip appearance="minimal"}
**Shiny App**

Expose the output for the adaptive bandwidth calibration, so that user can input the rounded up version of the output.
:::

```{r}
gwr_ad
```

### Predicting using test data

```{r}
#| output: false
gwr_pred <- gwr.predict(
    formula = resale_price ~ floor_area_sqm +
        storey_order + remaining_lease_mths +
        PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
        PROX_MRT + PROX_PARK + PROX_MALL + 
        PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
        WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
        WITHIN_1KM_PRISCH,
    data = train_data,
    predictdata = test_data,
    bw=20,
    kernel = 'gaussian',
    adaptive = TRUE,
    longlat = FALSE)
```

```{r}
gwr_pred
```

Saving prediction values from `gwr_pred`

```{r}
#| output: false
# reference the 'prediction' column and save as dataframe
gwr_pred_df <- as.data.frame(gwr_pred$SDF$prediction) %>% rename(gwr_pred = "gwr_pred$SDF$prediction")
```

### Using RF method

```{r}
coords <- st_coordinates(HDB_sample)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)

# ML packages cannot interpret geometric columns
train_data_nogeom <- train_data %>% st_drop_geometry()
test_data_nogeom <- test_data %>% st_drop_geometry()
```

```{r}
set.seed(69)
rf <- ranger(
    resale_price ~ floor_area_sqm +
        storey_order + remaining_lease_mths +
        PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
        PROX_MRT + PROX_PARK + PROX_MALL + 
        PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
        WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
        WITHIN_1KM_PRISCH,
    data = train_data_nogeom)
rf
```

```{r}
# preparing test data
test_data_nogeom <- cbind(
    test_data, coords_test) %>% st_drop_geometry()
```

```{r}
# predicting with rf
rf_pred <- predict(
    rf,
    data = test_data_nogeom
)
```

The output of `predict()` of **ranger** is object of class *ranger* with elements.

```{r}
# saving predicted values
rf_pred_df <- as.data.frame(rf_pred$predictions) %>% rename(rf_pred = "rf_pred$predictions")
```

```{r}
set.seed(69)
grf_ad <- grf(
    formula = resale_price ~ floor_area_sqm +
        storey_order + remaining_lease_mths +
        PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
        PROX_MRT + PROX_PARK + PROX_MALL + 
        PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
        WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
        WITHIN_1KM_PRISCH,
    dframe = train_data_nogeom,
    bw=20,
    kernel = 'adaptive',
    coords = coords_train)
```

```{r}
grf_pred <- predict.grf(
    grf_ad,
    test_data_nogeom,
    x.var.name = "X",
    y.var.name = "Y",
    local.w = 1,
    global.w = 0
)
```

```{r}
grf_pred_df <- as.data.frame(grf_pred)
```

# Model Comparison

```{r}
test_data_pred <- test_data %>% 
    select(resale_price) %>% 
    cbind(gwr_pred_df) %>% 
    cbind(rf_pred_df) %>% 
    cbind(grf_pred_df)
# visualise using scatter to see goodness of fit of predicted values
# do facet (facet_wrap(~model))
```

```{r}
# transpose data
test_longer <- test_data_pred %>% 
    st_drop_geometry() %>% 
    pivot_longer(
        cols = ends_with('pred'),
        names_to = 'model',
        values_to = 'predicted'
    )
```

```{r}
# renaming
model_labels <- c(
    gwr_pred = "gwr",
    rf_pred = "Random Forest",
    grf_pred = "gwRF")

test_longer <- test_longer %>% 
    mutate(
        model = recode(model, !!!model_labels))
```

```{r}
# computing rmse
rmse_results <- test_longer %>% 
    group_by(model) %>% 
    rmse(truth = resale_price, estimate = predicted) %>% 
    rename(rmse = .estimate) %>% 
    select(model, rmse)
```

```{r}
# bar
ggplot(rmse_results,
    aes(x=reorder(model, rmse),
        y=rmse,
        fill='skyblue'))+
    geom_bar(
        stat='identity',
        fill='skyblue',
        width=.7) +
    labs(title = "RMSE Comparison of Mod", y="RMSE", x="Model")
```

```{r}
#| eval: false
# scatter
test_longer <- test_longer %>% left_join(rmse_results, by = 'model')
ggplot(data=test_longer,
    aes(x=predicted, y=resale_price)) +
    facet_wrap(~model) +
    geom_point() +
    geom_text(data = test_longer, x=Inf, y=Inf, label=paste("RMSE:", round(rmse,2)))
```

```{r}
var_imp <- data.frame(
    Variable=names(grf_ad$Global.Model$variable.importance),
    Importance= grf_ad$Global.Model$variable.importance
)
```

```{r}
var_imp <- data.frame(
    Variable=names(grf_ad$Global.Model$variable.importance),
    Importance= grf_ad$Global.Model$variable.importance
)

ggplot(var_imp, aes(x=reorder(Variable, Importance), y=Importance)) +
    geom_bar(stat = 'identity', fill='skyblue') +
    coord_flip() +  # for readability
    labs(
        title = "Variable Importance from Ranger Model",
        x = "Variables", y = "Importance"
    ) +
    theme_minimal()
```

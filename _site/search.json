[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Geospatial Analytics and Applications (GAA)",
    "section": "",
    "text": "This is website contains my notes, ICEs, assignments for GAA. Enjoy."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "resources/ICEs/ex2/ice2.html",
    "href": "resources/ICEs/ex2/ice2.html",
    "title": "ICE 2:",
    "section": "",
    "text": "Load packages\n\npacman::p_load(tidyverse,sf,ggstatsplot,tmap)\n\n\n\nImport data\n\nMaster Plan 2014 Subzone Boundary (Web)\n\nSHP\n\nmpsz14_shp &lt;- st_read(dsn = 'data/geospatial/', layer = 'MP14_SUBZONE_WEB_PL')\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n# layer means sf will search for the engine(?)\n# layer wont need extension because it knows to seek for a shapefile\n#'&lt;-' or '=' works on windows+macOS\n\n\nNote: R is a OOP enabled language, sf being the object class\n\nExamine the data\n\nView(mpsz14_shp)\n\n\n\nKML\n\nmpsz14_kml = st_read('data/geospatial/MasterPlan2014SubzoneBoundaryWebKML.kml')\n# supposed to trigger a error message saying its unsupported / corrupted\n\nMasterPlan2014SubzoneBoundaryWebKML.kml from data.gov.sg is apparently corrupted.\nThis is a quick fix:\n\nst_write(mpsz14_shp, 'data/geospatial/MP14_SUBZONE_WEB_PL.kml', delete_dsn = TRUE)\n\nDeleting source `data/geospatial/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/geospatial/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n\n\n\n\nMaster Plan 2019 Subzone Boundary (No sea)\n\nkml\n\nmpsz19_kml = st_read('data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml')\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\nSHP (from ice1 in elearn)\n\nmpsz19_shp &lt;- st_read(dsn = 'data/MPSZ-2019/', layer = 'MPSZ-2019')\n\nReading layer `MPSZ-2019' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\ngeojson\n\nmpsz19_geojson &lt;- st_read('data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaGEOJSON.geojson')\n\nReading layer `MasterPlan2019SubzoneBoundaryNoSeaGEOJSON' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nNote: geojson format is very messy because the data is buried under html tags so lines of code is needed to extract; while in the kml / shp formats the data is readily accessible\n\n\nNote: under ‘geometry’ if the values tend to be large, its because its in PCS (measure in meters)\n\n\n\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Floor Area of Residence 2023\n\nNote: use the .csv file\n\n\npopdata2023 = read_csv('data/respopagesexfa2023.csv')\n\nRows: 75696 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nData Wrangling\nPrepare a data frame using the population data\n\npopdata2023 = popdata2023 %&gt;% \n  group_by(PA,SZ,AG) %&gt;% \n  summarise(POP=sum(Pop)) %&gt;% \n  ungroup() %&gt;% \n  pivot_wider(names_from = AG,values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\npivot_wider() transposes the data table structure for easier function application\n\nExamine the data structure\n\nstr(popdata2023)\n\ntibble [332 × 21] (S3: tbl_df/tbl/data.frame)\n $ PA         : chr [1:332] \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" \"Ang Mo Kio\" ...\n $ SZ         : chr [1:332] \"Ang Mo Kio Town Centre\" \"Cheng San\" \"Chong Boon\" \"Kebun Bahru\" ...\n $ 0_to_4     : num [1:332] 160 860 680 600 190 730 190 530 0 150 ...\n $ 10_to_14   : num [1:332] 300 1000 890 870 390 720 360 830 0 210 ...\n $ 15_to_19   : num [1:332] 310 1080 1020 970 430 730 450 860 0 240 ...\n $ 20_to_24   : num [1:332] 280 1210 1220 1050 480 850 520 830 0 250 ...\n $ 25_to_29   : num [1:332] 290 1570 1470 1250 510 1050 590 1110 0 320 ...\n $ 30_to_34   : num [1:332] 330 1950 1740 1470 400 1310 540 1400 0 260 ...\n $ 35_to_39   : num [1:332] 320 1860 1640 1390 320 1060 380 1200 0 240 ...\n $ 40_to_44   : num [1:332] 400 2100 1690 1580 380 1110 400 1490 0 300 ...\n $ 45_to_49   : num [1:332] 440 1910 1790 1640 480 1180 520 1530 0 300 ...\n $ 50_to_54   : num [1:332] 420 2070 1780 1680 550 1230 600 1400 0 340 ...\n $ 55_to_59   : num [1:332] 340 2050 1980 1720 540 1310 600 1410 0 300 ...\n $ 5_to_9     : num [1:332] 260 970 790 810 350 730 300 690 0 210 ...\n $ 60_to_64   : num [1:332] 300 2070 2080 1710 520 1410 660 1570 0 310 ...\n $ 65_to_69   : num [1:332] 270 2080 2070 1680 420 1270 630 1530 0 310 ...\n $ 70_to_74   : num [1:332] 280 1980 1900 1570 370 1150 440 1480 0 230 ...\n $ 75_to_79   : num [1:332] 160 1210 1410 1120 280 790 280 1050 0 150 ...\n $ 80_to_84   : num [1:332] 120 760 990 710 190 580 220 750 0 90 ...\n $ 85_to_89   : num [1:332] 50 360 450 360 120 310 150 400 0 50 ...\n $ 90_and_Over: num [1:332] 30 200 250 210 90 180 80 210 0 30 ...\n\n\n\nNote: age ranges are not in sequential order\n\n\ncolnames(popdata2023)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\nNote: index starts from 1\n\nFix the data table (override the previous)\n\npopdata2023 = popdata2023 %&gt;% \n  # CALCULATING AGE GROUP TOTALS\n  mutate(`YOUNG`=rowSums(.[3:6])+rowSums(.[14])) %&gt;%                # CREATES new col 'YOUNG'\n  mutate(`ECONOMY ACTIVE`=rowSums(.[7:13])+rowSums(.[15])) %&gt;%   # CREATES new col `ECONOMY ACTIVE`\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%                              # CREATES new col `AGED`\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%                              # CREATES new col `TOTAL`\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%   # CREATES new col `DEPENDENCY` to calculate dependency ratio\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`) # determines column order and contents in OUTPUT DATASET\n\nBecause R is case sensitive, convert everything into the same upper/lowercase in all the datasets\n\npopdata2023 = popdata2023 %&gt;% \n  mutate_at(.vars = vars(PA,SZ),.funs = list(toupper))\n\nCombine\n\npopdata2023 = left_join(popdata2023,mpsz19_shp, by = c('SZ'='SUBZONE_N'))\n\n\nNote: In the c() function, the column names’ positions correspond to which data table is the left table\n\n\n\nTransforming Coordinate System\n\nmpsz19_shp = st_read(dsn = 'data/MPSZ-2019/', layer = 'MPSZ-2019') %&gt;% # piping caches for next operation, saving memory\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\npreschool = st_read('data/PreSchoolsLocation.kml') %&gt;% \n  st_transform(crs = 3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/ICEs/ex2/data/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nChecking CRS\n\nst_crs(mpsz19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "resources/Hands-on_Ex/ex3/Hands-On_Ex_3.html",
    "href": "resources/Hands-on_Ex/ex3/Hands-On_Ex_3.html",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis (SPPA) Methods",
    "section": "",
    "text": "Distribution of Crime Incidents\n\n\n\nPoint pattern analysis (PPA) is the study of the spatial arrangements of points in (usually 2D) space to find out if the pattern is random or the result of something.\n\nSpatial PPA Methods\n\n\n1st order\n\nDensity-based\n\nKernel density estimation: compute intensity of a point distribution (Adaptive v. Fixed Bandwidth)\nQuadrat analysis to obtain variance-mean ratio (VMR: &gt;0,0,&lt;0): measure of dispersion rather than a measure of pattern; single measure for the entire distribution, so variation within the region are not recognised\n\nDistance-based\n\nNearest Neighbour Index\nG-function\nF-function\nK-function\nL-function\n\n\n\n\n\n\n\n\nUsing appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "resources/Hands-on_Ex/ex3/Hands-On_Ex_3.html#fixed-and-adaptive-kde",
    "href": "resources/Hands-on_Ex/ex3/Hands-On_Ex_3.html#fixed-and-adaptive-kde",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis (SPPA) Methods",
    "section": "Fixed and Adaptive KDE",
    "text": "Fixed and Adaptive KDE\n\nCompute KDE using fixed BW\n\nkde_childcareSG_600 &lt;- density(\n  childcareSG_ppp_km,\n  sigma=0.6,\n  edge=TRUE,\n  kernel='gaussian'\n)\n\n# sigma = 0.6 instead of 600 because\n# childcareSG_ppp_km object is in KILOMETERS\n\n\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\nCompute using adaptive BW\nFixed bandwidth method is very sensitive to highly skewed distribution of spatial point patterns over geographical units (for example urban versus rural). One solution is to use adaptive BW instead.\nDerive adaptive KDE using density.adaptive() of spatstat.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(\n  childcareSG_ppp_km,\n  method = 'kernel' # voronoi, kernel, nearest being the other methods\n)\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nCompare the fixed and adaptive KDE outputs.\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG_bw, main = \"Fixed BW\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive BW\")\n\n\n\n\n\n\n\n\n\n\nConverting KDE output into grid object\nConvert it so that it is suitable for mapping purposes.\n\ngridded_kde_childcareSG_bw &lt;- as(kde_childcareSG_bw,'SpatialGridDataFrame')\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\nConverting gridded output into raster\nConvert the gridded kernal density objects into RasterLayer object by using raster() of raster package\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG_bw)\n\n\nkde_childcareSG_bw_raster # min value differs from reference output(?)\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -1.005814e-14, 28.51831  (min, max)\n\n\n\n\nAssigning projection systems\nInclude the CRS information on kde_childcareSG_bw_raster RasterLayer\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -1.005814e-14, 28.51831  (min, max)\n\n\n\nNote the changes in the ‘CRS’ property.\n\n\n\n\nVisualising the output in tmap\nDisplay the raster in cartographic quality map\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\n\n\nComparing Spatial Point Patterns using KDE\nCompare KDE of childcare at Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.\nExtract and Plot study areas\n\npg &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;% filter(PLN_AREA_N == \"JURONG WEST\")\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Punggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(tm, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(ck, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\nplot(jw, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\nCreate owin object\n\nconvert these sf objects into owin objects that is required by spatstat.\n\n\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\nCombine childcare points and the study area\n\nextract childcare that is within the specific region for future analysis\n\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nconvert m to km using rescale.ppp()\n\n\nchildcare_pg_ppp_km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp_km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp_km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp_km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\n\nplot these four study areas and the locations of the childcare centres\n\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp_km, main=\"Punggol\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n\nplot(childcare_tm_ppp_km, main=\"Tampines\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 89 symbols are shown in the symbol map\n\nplot(childcare_ck_ppp_km, main=\"Choa Chu Kang\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n\nplot(childcare_jw_ppp_km, main=\"Jurong West\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 88 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\ncompute KDE (bw.diggle method is used to derive each of the bandwidth)\n\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp_km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp_km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")\nplot(density(childcare_ck_ppp_km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp_km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\nCompute fixed bandwidth KDE (250m for comparison)\n\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp_km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp_km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\nplot(density(childcare_pg_ppp_km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp_km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "resources/Hands-on_Ex/ex3/Hands-On_Ex_3.html#nearest-neighbour-analysis",
    "href": "resources/Hands-on_Ex/ex3/Hands-On_Ex_3.html#nearest-neighbour-analysis",
    "title": "Hands-on Exercise 3: 1st and 2nd Order Spatial Point Patterns Analysis (SPPA) Methods",
    "section": "Nearest Neighbour Analysis",
    "text": "Nearest Neighbour Analysis\nPerform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThis test measures whether a spatial point pattern is more regular (evenly spaced) or more clustered than a random distribution.\n\nHo = The distribution of childcare services are randomly distributed (CSR).\nH1= The distribution of childcare services are not randomly distributed.\n95% confidence level\n\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"), # type of alternative for the hypothesis test\n                nsim=99                     # Number of Monte Carlo simulations to perform\n  )\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n# clarkevans test is a crude measure of clustering or ordering of a point pattern.\n\n# This very small p-value (and &lt;0.05) indicates strong evidence against Ho, suggesting that the spatial pattern childcareSG_ppps is significantly different from CSR.\n\n\nClark and Evans Test: Choa Chu Kang planning area\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"), # check for deviations in both directions—whether the pattern is more regular or more clustered.\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.93899, p-value = 0.362\nalternative hypothesis: two-sided\n\n# p-value &lt; 0.05: no statistical evidence that the spatial pattern in childcare_ck_ppp is different from CSR\n\n\n\nClark and Evans Test: Tampines planning area\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.77181, p-value = 3.816e-05\nalternative hypothesis: two-sided\n\n# same conclusion as above"
  },
  {
    "objectID": "resources/Hands-on_Ex/ex2/Hands-On_Ex_2.html",
    "href": "resources/Hands-on_Ex/ex2/Hands-On_Ex_2.html",
    "title": "Hands-on Exercise 2: Thematic Mapping & Geovisualisation with R",
    "section": "",
    "text": "Overview\nTerms & Concepts:\n\nGeovisualisation: The over-arching concept that involve any geographic data visualisation technique\nThematic mapping: Use of map types/symbols to visualise variables that are not naturally visible in a geographical area\nChoropleth mapping: Type of thematic mapping to visualise variability across a region using color\n\nI will be using these R packages to build cartographic quality thematic maps:\n\ntmap\ntidyverse p\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\n\nLoad the packages into RStudio.\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\nImport Data\n\nData\nThe following datasets will be used to create a choropleth map:\n\nMaster Plan 2014 SubzoneBoundary(Web) : geospatial data consisting of the geographical boundary of SGP at the planning subzone level\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 : does not contain any coordinates values, but it’s PA and SZ fields can be used as UIDs to geocode to MP14_SUBZONE_WEB_PL shapefile\n\n\n\nImport Geospatial Data using st_read() from sf\n\nmspz &lt;- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/williamtjw/is415-gaa-williamtjw/resources/Hands-on_Ex/ex2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmspz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\nNote: It displays only the first 10 rows (or features) by default. This is a feature of the sf package to prevent overwhelming the console with too much information at once, especially when working with large datasets.\n\nAlternatively, use the one of the following code to explore the spatial data without being limited by the default limit\n\nView(mspz) # opens a separate tab to view the data in RStudios\n\n\nstr(mspz) # check structure\n\nClasses 'sf' and 'data.frame':  323 obs. of  16 variables:\n $ OBJECTID  : int  1 2 3 4 5 6 7 8 9 10 ...\n $ SUBZONE_NO: int  1 1 3 8 3 7 9 2 13 7 ...\n $ SUBZONE_N : chr  \"MARINA SOUTH\" \"PEARL'S HILL\" \"BOAT QUAY\" \"HENDERSON HILL\" ...\n $ SUBZONE_C : chr  \"MSSZ01\" \"OTSZ01\" \"SRSZ03\" \"BMSZ08\" ...\n $ CA_IND    : chr  \"Y\" \"Y\" \"Y\" \"N\" ...\n $ PLN_AREA_N: chr  \"MARINA SOUTH\" \"OUTRAM\" \"SINGAPORE RIVER\" \"BUKIT MERAH\" ...\n $ PLN_AREA_C: chr  \"MS\" \"OT\" \"SR\" \"BM\" ...\n $ REGION_N  : chr  \"CENTRAL REGION\" \"CENTRAL REGION\" \"CENTRAL REGION\" \"CENTRAL REGION\" ...\n $ REGION_C  : chr  \"CR\" \"CR\" \"CR\" \"CR\" ...\n $ INC_CRC   : chr  \"5ED7EB253F99252E\" \"8C7149B9EB32EEFC\" \"C35FEFF02B13E0E5\" \"3775D82C5DDBEFBD\" ...\n $ FMEL_UPD_D: Date, format: \"2014-12-05\" \"2014-12-05\" ...\n $ X_ADDR    : num  31596 28679 29655 26783 26202 ...\n $ Y_ADDR    : num  29220 29782 29975 29934 30006 ...\n $ SHAPE_Leng: num  5267 3506 1741 3314 2826 ...\n $ SHAPE_Area: num  1630379 559816 160807 595429 387429 ...\n $ geometry  :sfc_MULTIPOLYGON of length 323; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:157, 1:2] 31496 31981 32333 32362 32362 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA NA ...\n  ..- attr(*, \"names\")= chr [1:15] \"OBJECTID\" \"SUBZONE_NO\" \"SUBZONE_N\" \"SUBZONE_C\" ...\n\n\n\n\nImport Attribute Data using read_csv() from readr package\nImport respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesexfa2011to2020.csv\")\n\nRows: 738492 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, FA\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nview(popdata)\n\n\n\nData Preparation\nPrepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\nData Wrangling\n\nData wrangling is the process of transforming and structuring data from one raw form into a desired format with the intent of improving data quality and making it more consumable and useful for analytics or machine learning.\n\nData wrangling & transformation functions used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  # group_by -&gt; summarise -&gt; ungroup\n  filter(Time==2020) %&gt;%   # keeps rows where the 'Time' col is 2020\n  group_by(PA,SZ,AG) %&gt;%   # needed for summarise() to work\n  summarise(POP=sum(Pop)) %&gt;% # summarises GROUPED DATA by summing 'Pop' value in each (PA,SZ,AG) group & stores in new col 'POP'\n  ungroup() %&gt;%                   # removes grouping structure, allows us to perform further operations on the data\n  pivot_wider(names_from = AG,values_from =POP)  # reshapes data to WIDE format\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nVisualise popdata2020 dataset before calculating age group totals.\n\nView(popdata2020)\n\n\npopdata2020 &lt;- popdata2020 %&gt;% \n  # CALCULATING AGE GROUP TOTALS\n  mutate(`YOUNG`=rowSums(.[3:6])+rowSums(.[14])) %&gt;%                # CREATES new col 'YOUNG'\n  mutate(`ECONOMY ACTIVE`=rowSums(.[7:13])+rowSums(.[15])) %&gt;%   # CREATES new col `ECONOMY ACTIVE`\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%                              # CREATES new col `AGED`\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%                              # CREATES new col `TOTAL`\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%   # CREATES new col `DEPENDENCY` to calculate dependency ratio\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`) # determines column order and contents in OUTPUT DATASET\n\n\n\nJoin attribute and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;% \n  mutate_at(.vars = vars(PA,SZ),.funs = list(toupper)) %&gt;% \n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mspz,popdata2020,by = c('SUBZONE_N'='SZ')) # c() is a generic func which combines its args\n\n\nNote that the format of the left data table (mpsz simple feature dataframe) is preserved in the output, because of left_join\n\n\nwrite_rds(mpsz_pop2020,'data/rds/mpszpop2020.rds')\n\n\n\n\n\nChoropleth Mapping Geospatial Data Using tmap\n\nUsing qtm()\nPlot a cartographic standard choropleth map\n\ntmap_mode(\"plot\") # produce a static map; for interactive mode, “view” option should be used.\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\") # map the attribute (i.e. DEPENDENCY)\n\n\n\n\n\n\n\n\n\n\nUsing tmap elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill('DEPENDENCY', \n          style = 'quantile', \n          palette = 'Blues',\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone',\n            main.title.position = 'center',\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type='8star', size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits('Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS', position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nPlotting the base map\ntm_shape() followed by one or more layer elements such as tm_fill() and tm_polygons()\n\ntm_shape(mpsz_pop2020) + tm_polygons()\n\n\n\n\n\n\n\n# tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\n\n\nPlotting a choropleth map using tm_polygons()\nAssign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n# The default interval binning used to draw the choropleth map is called “pretty”.\n# The default colour scheme used is YlOrRd of ColorBrewer.\n# By default, Missing value will be shaded in grey.\n\n\n\nPlotting a choropleth map using tm_fill() and tm_border()\ntm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map\nWithout borders,\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWith borders,\n\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = .1,  alpha = 1) # adds the boundary of the planning subzones\n\n\n\n\n\n\n\n# The alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\n# Arguments for tm_borders():\n\n# col = border colour,\n# lwd = border line width. The default is 1, and\n# lty = border line type. The default is “solid”.\n\n\n\n\nData classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely:\n(click to jump to corresponding section)\n\nfixed,\n[sd],\n[equal],\n[pretty (default],\n[quantile],\n[kmeans],\n[hclust],\n[bclust],\nbclust, and\n[jenks].\n\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\nPlotting choropleth maps with built-in classification methods (n=5 and n=20)\n\nquantile\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,                 # 5 classes\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nequal\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n\nsd\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\npretty (default)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nkmeans\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nhclust\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nbclust\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n\n\n\n\nfisher\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\njenks\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,                 # 20 classes\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nPlotting choropleth map with custom break\nFor all the built-in styles, the category breaks are computed internally. To override these defaults, set the breakpoints using the breaks argument in tm_fill(). In tmap the breaks include a minimum and maximum. Hence to have n categories, n+1 elements must be specified in the breaks option in ascending order.\nCompute and display the descriptive statistics of DEPENDENCY field\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6540  0.7063  0.7712  0.7657 19.0000      92 \n\n\n\nWith reference to the results above, set break point at 0.60, 0.70, 0.80, and 0.90.\nInclude a minimum and maximum at 0 and 1.00.\nHence c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n\nPlot the choropleth map\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\nWarning: Values have found that are higher than the highest break\n\n\n\n\n\n\n\n\n\n\nNote: Values outside the breakpoints that may be essential for analysis\n\n\n\n\nColor Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package\n\nColourBrewer palette\nTo change the colour, assign the preferred colour to palette argument of tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green. To reverse the colour shading, add a “-” prefix.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") + # lower data values = deeper green shading\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nMap layout\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include map objects, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\nMap Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill('DEPENDENCY', \n          style = 'jenks', \n          palette = 'Blues', \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = 'Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)',\n            main.title.position = 'center',\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c('right', 'bottom'),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nMap style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\nNote: other available styles are: “white”, “gray”, “natural”, “cobalt”, “col_blind”, “albatross”, “beaver”, “bw”, “watercolor”\n\n\n\nCartographic Furniture\ntmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines\ntm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nTo reset the default style,\n\ntmap_style(\"white\")\n\n\n\n\n\nDrawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nAssign multiple values to at least one of the asthetic arguments\n\nDefine ncols in tm_fill()\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\nAssign multiple values to at least one of the aesthetic arguments\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nDefine a group-by variable in tm_facets()\n\nCreate multiple small choropleth maps using tm_facets().\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\n\nCreate multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nMapping Spatial Object Meeting a Selection Criterion\nUse selection funtion to map spatial objects meeting the selection criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\",])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.outside.size = 0.5,               # ~0.5\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n\n\n\n\n\n\n\n\n\n\nWarning: legend.width controls the width of the legend within a map. Please use legend.outside.size to control the width of the outside legend\n\n\n\n\nReadings\n\n\n\nReference\nUsage\nPros\nCons\nApplications\nNotes\n\n\n\n\nProportional Symbols\nScale symbols proportionate to data values\n\nversatile (raw & standardized data)\nmultivariate encoding\n\n\ncongested symbols are hard to read\nsize comparison\n\n\nnumerical data\norder categorical data (rating level)\n\n\ncongestion\ncomplexity\n\n\n\nChoropleth Maps\nColor intensity proportionate to data value\n\nClear regional trends\nClear contrast between intensities\nColor-coded regions can be compared less subjectively than size\n\n\nSmall areas with high data values can get overshadowed by large areas\nColor perception is still imperfect\n\n\n%s, rates, pop. density, …\ndata aggregated over a geographic area (enumeration units)\n\n\nArea bias\n\n\n\n\nData Classification\n\ndefined as grouping a large number of data values into ranges, allowing for data categorisation and subsequent visualisation on a map\nPurpose\n\nminimize misleading representations or patterns\nminimize within-group variance; maximize between-group variance (also method)\n\nMethods\n\nEqual interval\nQuantile\nManual (based on summary stats or other criteria)\n\nTools (for future reference)\n\nQGIS\nArcGIS\nD3 - JS libraries for visualising spatial data (web mapping)"
  },
  {
    "objectID": "resources/ICEs/ex1/data/MPSZ-2019.html",
    "href": "resources/ICEs/ex1/data/MPSZ-2019.html",
    "title": "IS415",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "resources/ICEs/ex2/data/MPSZ-2019/MPSZ-2019.html",
    "href": "resources/ICEs/ex2/data/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  }
]